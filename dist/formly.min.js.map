{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/formly.min.js","webpack:///webpack/bootstrap 35552b86acf7dd684806","webpack:///./index.js","webpack:///./index.js?b4fb","webpack:///./angular-fix/index.js","webpack:///./angular-fix/index.js?cf45","webpack:///./other/utils.js","webpack:///./other/utils.js?ffaa","webpack:///./other/docsBaseUrl.js","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-custom-validation.js?5e8e","webpack:///./directives/formly-field.js","webpack:///./directives/formly-field.js?ac8b","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-focus.js?b982","webpack:///./directives/formly-form.controller.js","webpack:///./directives/formly-form.controller.js?13bb","webpack:///./directives/formly-form.js","webpack:///./directives/formly-form.js?e613","webpack:///./index.common.js","webpack:///./index.common.js?62bb","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyApiCheck.js?16e7","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyConfig.js?4bad","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyUsability.js?e7dc","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyValidationMessages.js?429b","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyCustomTags.js?dc71","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/formlyNgModelAttrsManipulator.js?7577","webpack:///./services/formlyUtil.js","webpack:///./services/formlyUtil.js?e034","webpack:///./services/formlyWarn.js","webpack:///./services/formlyWarn.js?08b5","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_19__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_indexCommon","_indexCommon2","angular","version","window","containsSelector","string","containsSpecialChar","a","b","indexOf","formlyEval","scope","expression","$modelValue","$viewValue","extraLocals","_angularFix2","isFunction","$eval","extend","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","assign","create","getPrototypeOf","obj1","obj2","isObject","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","arrayify","isArray","extendFunction","_len","fns","Array","_key","args","fn","apply","extendArray","primary","secondary","property","item","push","startsWith","str","search","isString","substring","contains","_angularFix","formlyCustomValidation","formlyUtil","restrict","link","attrs","ctrl","addValidatorToPipeline","isAsync","validator","name","setupMessage","useNewValidatorsApi","setupWithValidators","setupWithParsers","message","opts","validation","messages","validatorCollection","modelValue","viewValue","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","then","$setValidity","keys","hasOwnProperty","validators","bind","asyncValidators","$inject","_toConsumableArray","arr","arr2","from","formlyField","$http","$q","$compile","$templateCache","$interpolate","formlyConfig","formlyApiCheck","formlyUsability","formlyWarn","FormlyFieldController","$scope","$timeout","$parse","$controller","formlyValidationMessages","runExpressions","deferred","defer","promises","field","currentValue","valueGetterSetter","expressionProperties","setter","promise","when","all","resolve","watchExpressions","formOptions","watchAllExpressions","$watch","newVal","model","parseSet","parseGet","shouldNotUseParseKey","isNumber","keyContainsArrays","test","deepAssign","replace","split","e","shift","isNaN","extras","parseKeyArrays","simplifyLife","originalModel","data","templateOptions","to","setFieldIdAndName","formName","form","$name","setDefaultValue","defaultValue","setInitialValue","initialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","reverse","typeName","getType","extraOptions","extendOptionsWithDefaults","resetModel","updateInitialValue","formControl","resetFormControl","$setUntouched","$setPristine","isMultiNgModel","$setViewValue","$render","$root","$$phase","$digest","addValidationMessages","invokeControllers","controller","setupFieldGroup","formState","fieldGroup","fieldType","getFieldType","checkApi","fieldLink","formlyFormCtrl","setFieldGroupTemplate","checkFieldGroupApi","addClass","extraAttributes","elementAttributes","map","getTemplate","className","transcludeInWrappers","setElementTemplate","addAttributes","attr","addClasses","templateString","html","asHtml","contents","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","exec","watchFieldExistence","fieldCount","fc","stopWatchingShowError","addShowMessagesWatcher","addParsers","addFormatters","customExpression","errorExistsAndShouldBeVisibleExpression","formControls","some","$invalid","show","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","setParsersOrFormatters","formWasPristine","$pristine","formatters","$formatters","formatter","which","getThingsFromType","theType","typeThings","getDefaultOptionsProperty","getThingsFromOptionsTypes","getDefaultOptionsOptionsTypes","optionsTypesThings","copy","optionsTypeName","getFormlyExpressionThing","thing","formlyExpressionParserOrFormatterFunction","originalThingProp","things","ngModelCtrls","ngModelCtrl","_ngModelCtrl","concat","noop","noFormControl","templateEl","ngModelNodes","querySelectorAll","ngModelNode","getAttribute","callLinkFunctions","thusly","runManipulators","manipulators","templateToManipulate","chain","manipulator","newTemplate","fieldManipulators","getManipulators","getFieldTemplate","preWrapper","postWrapper","error","wrapper","append","addManipulators","_ref","_ref$preWrapper","pre","_ref$postWrapper","post","templateManipulators","fromOptionsOrType","getFieldError","isUrl","templatePromise","_ret3","httpOptions","cache","v","url","get","response","getWrapperOption","aWrapper","checkWrapper","runApiCheck","w","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","totalWrapper","doTransclusion","superWrapper","transcludeEl","find","replaceWith","getWrapper","getWrapperByType","typeWrappers","formWrappers","defaultWrapper","formlyFieldOptions","prefix","hide","_ref2","forType","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","runApiCheckForType","getTypeHeritage","instance","config","disabled","_apiCheck2","globalConfig","checkerObjects","shape","checker","checkOptions","output","docsBaseUrl","transclude","fields","_apiCheck","formlyFocus","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","isFieldGroup","FormlyFormController","onModelOrFormStateChange","runFieldExpressionProperties","validateFormControl","validate","$validate","hideExpression","evalCloseToFormlyExpression","validateOnModelChange","setupFields","checkDeprecatedOptions","fieldTransforms","fieldTransform","getFormlyError","setupModels","setupHideExpressionWatcher","attachKey","setupWatchers","setupOptions","formOptionsApi","optional","watchedModels","manualModelWatcher","isNewModel","initModel","resolveStringModel","referencesCurrentlyWatchedModel","watcher","watchers","listener","runFieldExpressions","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","toString","originalExpression","modifyArgs","_slice","displayName","originalListener","originalArgs","getFormlyFieldLikeLocals","prototype","slice","formlyForm","formlyFormGetTemplate","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","defaultHideDirective","getTrackBy","trackBy","getFormName","bindName","minor","startSymbol","endSymbol","getTranscludeClass","transcludeClass","copyAttributes","attributes","excluded","arrayAttrs","toKebabCase","currentFormId","parentFormAttributes","parent","hasClass","formlyFormLink","setFormController","theFormlyForm","getter","parentForm","$parent","$removeControl","removeData","disableWarnings","fixChromeAutocomplete","global","removeChromeAutoComplete","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","$1","toLowerCase","_providersFormlyApiCheck","_providersFormlyApiCheck2","_otherDocsBaseUrl","_otherDocsBaseUrl2","_providersFormlyUsability","_providersFormlyUsability2","_providersFormlyConfig","_providersFormlyConfig2","_providersFormlyValidationMessages","_providersFormlyValidationMessages2","_servicesFormlyUtil","_servicesFormlyUtil2","_servicesFormlyWarn","_servicesFormlyWarn2","_directivesFormlyCustomValidation","_directivesFormlyCustomValidation2","_directivesFormlyField","_directivesFormlyField2","_directivesFormlyFocus","_directivesFormlyFocus2","_directivesFormlyForm","_directivesFormlyForm2","_directivesFormlyFormController","_directivesFormlyFormController2","_runFormlyNgModelAttrsManipulator","_runFormlyNgModelAttrsManipulator2","_runFormlyCustomTags","_runFormlyCustomTags2","ngModuleName","ngModule","constant","provider","directive","run","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","otherProp","utils","getError","checkerHelpers","setupChecker","formlyExpression","oneOfType","func","specifyWrapperType","typeOrArrayOf","nullable","apiCheckProperty","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","oneOf","formlyWrapperType","ifNot","types","overwriteOk","bool","object","strict","objectOf","modelChecker","arrayOf","validatorChecker","watcherChecker","fieldOptionsApiShape","$$hashKey","any","number","skipNgModelAttrsManipulator","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","parsers","ngModelElAttrs","ngModelAttrs","statement","attribute","bound","boolean","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","formlyErrorAndWarningsUrlPrefix","setType","checkType","extendTypeOptions","typeMap","JSON","stringify","_ret","allTypes","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeDefaultOptions","_otherUtils2","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","getTypes","heritage","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","newValue","objectName","wrappers","_name","removeWrapperByName","removeWrappersForType","_this","console","warnInfoSlug","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","_otherUtils","errorInfoSlug","Error","getErrorMessage","toJson","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","addCustomTags","documentMode","customElements","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","alterNgModelAttr","isPropertyAccessor","addRegardlessOfPresence","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","addNgModelElAttrs","skip","innerHTML","getNgModelNodes","selectorNot","skipNot","query","getNgModelNodesFallback","allNgModelNodes","matchingNgModelNodes","hasAttribute","nodeMatches","selector","div","outerHTML","querySelector","boundOnly","bothBooleanAndBound","bothAttributeAndBound","statementOnly","attributeOnly","substr","nodes","$log"],"mappings":"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","file":"dist/formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*! angular-formly v8.4.1 | MIT | built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò) */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _indexCommon = __webpack_require__(10);\n\t\n\tvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\t\n\texports['default'] = _indexCommon2['default'];\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar angular = __webpack_require__(19);\n\t\n\t/* istanbul ignore next */\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\texports['default'] = angular;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = {\n\t  containsSelector: containsSelector, containsSpecialChar: containsSpecialChar, formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName,\n\t  arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n\t};\n\t\n\tfunction containsSelector(string) {\n\t  return containsSpecialChar(string, '.') || containsSpecialChar(string, '[') && containsSpecialChar(string, ']');\n\t}\n\t\n\tfunction containsSpecialChar(a, b) {\n\t  if (!a || !a.indexOf) {\n\t    return false;\n\t  }\n\t  return a.indexOf(b) !== -1;\n\t}\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (_angularFix2['default'].isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  if (options.id) {\n\t    return options.id;\n\t  }\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = 'template';\n\t  } else if (!type && options.templateUrl) {\n\t    type = 'templateUrl';\n\t  }\n\t\n\t  return [formId, type, options.key, index].join('_');\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  _angularFix2['default'].forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    _angularFix2['default'].forEach(src, function (val, prop) {\n\t      if (!_angularFix2['default'].isDefined(dest[prop])) {\n\t        if (typeof val === 'object' && val !== null) {\n\t          dest[prop] = Object.assign(Object.create(Object.getPrototypeOf(val)), val);\n\t        } else {\n\t          dest[prop] = val;\n\t        }\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t  return dest;\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = _angularFix2['default'].element(el);\n\t  }\n\t\n\t  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayify(obj) {\n\t  if (obj && !_angularFix2['default'].isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\t\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\t\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\t\n\tfunction extendArray(primary, secondary, property) {\n\t  if (property) {\n\t    primary = primary[property];\n\t    secondary = secondary[property];\n\t  }\n\t  if (secondary && primary) {\n\t    _angularFix2['default'].forEach(secondary, function (item) {\n\t      if (primary.indexOf(item) === -1) {\n\t        primary.push(item);\n\t      }\n\t    });\n\t    return primary;\n\t  } else if (secondary) {\n\t    return secondary;\n\t  } else {\n\t    return primary;\n\t  }\n\t}\n\t\n\tfunction startsWith(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.substring(0, search.length) === search;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction contains(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.indexOf(search) !== -1;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + (\"8.4.1\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyCustomValidation.$inject = [\"formlyUtil\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyCustomValidation;\n\t\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil) {\n\t  return {\n\t    restrict: 'A',\n\t    require: 'ngModel',\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\t\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n\t      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n\t      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\t\n\t      function addValidatorToPipeline(isAsync, validator, name) {\n\t        setupMessage(validator, name);\n\t        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators(validator, name, isAsync);\n\t        } else {\n\t          setupWithParsers(validator, name, isAsync);\n\t        }\n\t      }\n\t\n\t      function setupMessage(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t      }\n\t\n\t      function setupWithValidators(validator, name, isAsync) {\n\t        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\t\n\t        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t        };\n\t      }\n\t\n\t      function setupWithParsers(validator, name, isAsync) {\n\t        var inFlightValidator = undefined;\n\t        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t          if (isAsync) {\n\t            ctrl.$pending = ctrl.$pending || {};\n\t            ctrl.$pending[name] = true;\n\t            inFlightValidator = isValid;\n\t            isValid.then(function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, true);\n\t              }\n\t            })['catch'](function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, false);\n\t              }\n\t            })['finally'](function () {\n\t              var $pending = ctrl.$pending || {};\n\t              if (Object.keys($pending).length === 1) {\n\t                delete ctrl.$pending;\n\t              } else {\n\t                delete ctrl.$pending[name];\n\t              }\n\t            });\n\t          } else {\n\t            ctrl.$setValidity(name, isValid);\n\t          }\n\t          return viewValue;\n\t        });\n\t      }\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _apiCheck = __webpack_require__(4);\n\t\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\texports['default'] = formlyField;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", \"formlyValidationMessages\"];\n\t  var arrayify = formlyUtil.arrayify;\n\t\n\t  return {\n\t    restrict: 'AE',\n\t    transclude: true,\n\t    require: '?^formlyForm',\n\t    scope: {\n\t      options: '=',\n\t      model: '=',\n\t      originalModel: '=?',\n\t      formId: '@', // TODO remove formId in a breaking release\n\t      index: '=?',\n\t      fields: '=?',\n\t      formState: '=?',\n\t      formOptions: '=?',\n\t      form: '=?' },\n\t    // TODO require form in a breaking release\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\t\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n\t    /* eslint max-statements:[2, 37] */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\t\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\t\n\t    // initalization\n\t    setFieldIdAndName();\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    watchExpressions();\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t    // function definitions\n\t    function runExpressions() {\n\t      var deferred = $q.defer();\n\t      // must run on next tick to make sure that the current value is correct.\n\t      $timeout(function runExpressionsOnNextTick() {\n\t        var promises = [];\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue)).then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t          promises.push(promise);\n\t        });\n\t        $q.all(promises).then(function () {\n\t          deferred.resolve();\n\t        });\n\t      }, 0, false);\n\t      return deferred.promise;\n\t    }\n\t\n\t    function watchExpressions() {\n\t      if ($scope.formOptions.watchAllExpressions) {\n\t        (function () {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          _angularFix2['default'].forEach(field.expressionProperties, function watchExpression(expression, prop) {\n\t            var setter = $parse(prop).assign;\n\t            $scope.$watch(function expressionPropertyWatcher() {\n\t              return formlyUtil.formlyEval($scope, expression, currentValue, currentValue);\n\t            }, function expressionPropertyListener(value) {\n\t              setter(field, value);\n\t            }, true);\n\t          });\n\t        })();\n\t      }\n\t    }\n\t\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return undefined;\n\t      }\n\t      if (_angularFix2['default'].isDefined(newVal)) {\n\t        parseSet($scope.options.key, $scope.model, newVal);\n\t      }\n\t      return parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function shouldNotUseParseKey(key) {\n\t      return _angularFix2['default'].isNumber(key) || !formlyUtil.containsSelector(key);\n\t    }\n\t\n\t    function keyContainsArrays(key) {\n\t      return (/\\[\\d{1,}\\]/.test(key)\n\t      );\n\t    }\n\t\n\t    function deepAssign(obj, prop, value) {\n\t      if (_angularFix2['default'].isString(prop)) {\n\t        prop = prop.replace(/\\[(\\w+)\\]/g, '.$1').split('.');\n\t      }\n\t\n\t      if (prop.length > 1) {\n\t        var e = prop.shift();\n\t        obj[e] = obj[e] || isNaN(prop[0]) ? {} : [];\n\t        deepAssign(obj[e], prop, value);\n\t      } else {\n\t        obj[prop[0]] = value;\n\t      }\n\t    }\n\t\n\t    function parseSet(key, model, newVal) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key && key !== 0 || !model) {\n\t        return;\n\t      }\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (shouldNotUseParseKey(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        model[key] = newVal;\n\t      } else if (formlyConfig.extras.parseKeyArrays && keyContainsArrays(key)) {\n\t        deepAssign($scope.model, key, newVal);\n\t      } else {\n\t        var setter = $parse($scope.options.key).assign;\n\t        if (setter) {\n\t          setter($scope.model, newVal);\n\t        }\n\t      }\n\t    }\n\t\n\t    function parseGet(key, model) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key && key !== 0 || !model) {\n\t        return undefined;\n\t      }\n\t\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (shouldNotUseParseKey(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        return model[key];\n\t      } else {\n\t        return $parse(key)(model);\n\t      }\n\t    }\n\t\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        originalModel: options.model,\n\t        extras: {},\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t      $scope.formOptions = $scope.formOptions || {};\n\t    }\n\t\n\t    function setFieldIdAndName() {\n\t      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t      } else {\n\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t      }\n\t      $scope.options.id = $scope.id;\n\t      $scope.name = $scope.options.name || $scope.options.id;\n\t      $scope.options.name = $scope.name;\n\t    }\n\t\n\t    function setDefaultValue() {\n\t      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n\t        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n\t      }\n\t    }\n\t\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      _angularFix2['default'].forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\t\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (_angularFix2['default'].isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options, $scope);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\t\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      _angularFix2['default'].extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: options.value || valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\t\n\t    function resetModel() {\n\t      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n\t      if ($scope.options.formControl) {\n\t        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n\t          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n\t            resetFormControl(formControl, true);\n\t          });\n\t        } else {\n\t          resetFormControl($scope.options.formControl);\n\t        }\n\t      }\n\t      if ($scope.form) {\n\t        $scope.form.$setUntouched && $scope.form.$setUntouched();\n\t        $scope.form.$setPristine();\n\t      }\n\t    }\n\t\n\t    function resetFormControl(formControl, isMultiNgModel) {\n\t      if (!isMultiNgModel) {\n\t        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n\t      }\n\t\n\t      formControl.$render();\n\t      formControl.$setUntouched && formControl.$setUntouched();\n\t      formControl.$setPristine();\n\t\n\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t      if (!$scope.$root.$$phase) {\n\t        $scope.$digest();\n\t      }\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\t\n\t    function invokeControllers(scope) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t      $scope.to = $scope.options.templateOptions;\n\t    }\n\t  }\n\t\n\t  // link function\n\t  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\t\n\t    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n\t    if (!formlyFormCtrl && scope.options.model) {\n\t      scope.$watch('options.model', function () {\n\t        return scope.options.runExpressions();\n\t      }, true);\n\t    }\n\t\n\t    addAttributes();\n\t    addClasses();\n\t\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    var fieldCount = 0;\n\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n\t      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n\t    });\n\t\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass('formly-field-group');\n\t      var extraAttributes = '';\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n\t        }).join(' ');\n\t      }\n\t      var modelValue = 'model';\n\t      scope.options.form = scope.form;\n\t      if (scope.options.key) {\n\t        modelValue = 'model[\\'' + scope.options.key + '\\']';\n\t      }\n\t      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n\t    }\n\t\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\t\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass('formly-field-' + scope.options.type);\n\t      }\n\t    }\n\t\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\t\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingShowError = _angularFix2['default'].noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n\t      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\t\n\t      if (ngModelNodes.length) {\n\t        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n\t          fieldCount++;\n\t          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n\t        });\n\t      }\n\t\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          name = $interpolate(name)(scope);\n\t        }\n\t        watchFieldExistence(name);\n\t      }\n\t\n\t      function watchFieldExistence(name) {\n\t        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n\t          if (formControl) {\n\t            if (fieldCount > 1) {\n\t              if (!scope.options.formControl) {\n\t                scope.options.formControl = [];\n\t              }\n\t              scope.options.formControl.push(formControl);\n\t            } else {\n\t              scope.options.formControl = formControl;\n\t            }\n\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t            addParsers();\n\t            addFormatters();\n\t          }\n\t        });\n\t      }\n\t\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var formControls = arrayify(scope.fc);\n\t          if (!formControls.some(function (fc) {\n\t            return fc.$invalid;\n\t          })) {\n\t            return false;\n\t          } else if (typeof options.validation.show === 'boolean') {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formControls.some(function (fc) {\n\t              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t            });\n\t          } else {\n\t            return formControls.some(function (fc) {\n\t              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n\t              return fc.$touched || noTouchedButDirty;\n\t            });\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\t\n\t      function addParsers() {\n\t        setParsersOrFormatters('parsers');\n\t      }\n\t\n\t      function addFormatters() {\n\t        setParsersOrFormatters('formatters');\n\t        var ctrl = scope.fc;\n\t        var formWasPristine = scope.form.$pristine;\n\t        if (scope.options.formatters) {\n\t          (function () {\n\t            var value = ctrl.$modelValue;\n\t            ctrl.$formatters.forEach(function (formatter) {\n\t              value = formatter(value);\n\t            });\n\t\n\t            ctrl.$setViewValue(value);\n\t            ctrl.$render();\n\t            ctrl.$setPristine();\n\t            if (formWasPristine) {\n\t              scope.form.$setPristine();\n\t            }\n\t          })();\n\t        }\n\t      }\n\t\n\t      function setParsersOrFormatters(which) {\n\t        var originalThingProp = 'originalParser';\n\t        if (which === 'formatters') {\n\t          originalThingProp = 'originalFormatter';\n\t        }\n\t\n\t        // init with type's parsers\n\t        var things = getThingsFromType(type);\n\t\n\t        // get optionsTypes things\n\t        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\t\n\t        // get field's things\n\t        things = formlyUtil.extendArray(things, scope.options[which]);\n\t\n\t        // convert things into formlyExpression things\n\t        _angularFix2['default'].forEach(things, function (thing, index) {\n\t          things[index] = getFormlyExpressionThing(thing);\n\t        });\n\t\n\t        var ngModelCtrls = scope.fc;\n\t        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n\t          ngModelCtrls = [ngModelCtrls];\n\t        }\n\t\n\t        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n\t          var _ngModelCtrl;\n\t\n\t          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n\t        });\n\t\n\t        function getThingsFromType(theType) {\n\t          if (!theType) {\n\t            return [];\n\t          }\n\t          if (_angularFix2['default'].isString(theType)) {\n\t            theType = formlyConfig.getType(theType, true, scope.options);\n\t          }\n\t          var typeThings = [];\n\t\n\t          // get things from parent\n\t          if (theType['extends']) {\n\t            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n\t          }\n\t\n\t          // get own type's things\n\t          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\t\n\t          // get things from optionsTypes\n\t          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\t\n\t          return typeThings;\n\t        }\n\t\n\t        function getThingsFromOptionsTypes() {\n\t          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t          var optionsTypesThings = [];\n\t          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n\t            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n\t          });\n\t          return optionsTypesThings;\n\t        }\n\t\n\t        function getFormlyExpressionThing(thing) {\n\t          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n\t          return formlyExpressionParserOrFormatterFunction;\n\t\n\t          function formlyExpressionParserOrFormatterFunction($viewValue) {\n\t            var $modelValue = scope.options.value();\n\t            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\t\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t        var chain = $q.when(templateToManipulate);\n\t        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\t\n\t  // sort-of stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = _angularFix2['default'].element('<a></a>');\n\t    return wrapper.append(el).html();\n\t  }\n\t\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\t\n\t  function getManipulators(options, formOptions) {\n\t    var preWrapper = [];\n\t    var postWrapper = [];\n\t    addManipulators(options.templateManipulators);\n\t    addManipulators(formOptions.templateManipulators);\n\t    addManipulators(formlyConfig.templateManipulators);\n\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\t\n\t    function addManipulators(manipulators) {\n\t      /* eslint-disable */ // it doesn't understand this :-(\n\t\n\t      var _ref = manipulators || {};\n\t\n\t      var _ref$preWrapper = _ref.preWrapper;\n\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t      var _ref$postWrapper = _ref.postWrapper;\n\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\t\n\t      preWrapper = preWrapper.concat(pre);\n\t      postWrapper = postWrapper.concat(post);\n\t      /* eslint-enable */\n\t    }\n\t  }\n\t\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, fieldType) {\n\t      if (_angularFix2['default'].isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n\t        return fieldType[key];\n\t      }\n\t    }\n\t\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType('template', type);\n\t    var templateUrl = fromOptionsOrType('templateUrl', type);\n\t    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n\t    }\n\t\n\t    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n\t  }\n\t\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (_angularFix2['default'].isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\t\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret3 = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })['catch'](function handleErrorGettingATemplate(error) {\n\t            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n\t          })\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret3 === 'object') return _ret3.v;\n\t    }\n\t  }\n\t\n\t  function transcludeInWrappers(options, formOptions) {\n\t    var wrapper = getWrapperOption(options, formOptions);\n\t\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\t\n\t      wrapper.forEach(function (aWrapper) {\n\t        formlyUsability.checkWrapper(aWrapper, options);\n\t        runApiCheck(aWrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\t\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find('formly-transclude');\n\t    if (!transcludeEl.length) {\n\t      // try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\t\n\t  function getWrapperOption(options, formOptions) {\n\t    /* eslint complexity:[2, 6] */\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\t\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\t\n\t    // get all wrappers for that the type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\t\n\t    // add form wrappers\n\t    if (formOptions.wrapper) {\n\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(formWrappers);\n\t    }\n\t\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\t\n\t  function checkApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      runApiCheck(type, options, true);\n\t    }\n\t    if (options.expressionProperties && options.expressionProperties.hide) {\n\t      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n\t    }\n\t  }\n\t\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t  }\n\t\n\t  function runApiCheck(_ref2, options, forType) {\n\t    var apiCheck = _ref2.apiCheck;\n\t    var apiCheckInstance = _ref2.apiCheckInstance;\n\t    var apiCheckFunction = _ref2.apiCheckFunction;\n\t    var apiCheckOptions = _ref2.apiCheckOptions;\n\t\n\t    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n\t    if (forType && options.type) {\n\t      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n\t        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n\t      });\n\t    }\n\t  }\n\t\n\t  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n\t    /* eslint complexity:[2, 9] */\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n\t    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n\t      return;\n\t    }\n\t    var fn = apiCheckFunction || 'warn';\n\t    // this is the new API\n\t    var checkerObjects = apiCheck(instance);\n\t    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n\t      var checker = instance.shape(shape);\n\t      var checkOptions = _angularFix2['default'].extend({\n\t        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n\t        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n\t      }, apiCheckOptions);\n\t      instance[fn](checker, options[name], checkOptions);\n\t    });\n\t  }\n\t}\n\t\n\t// Stateless util functions\n\tfunction getDefaultOptionsOptionsTypes(type) {\n\t  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n\t}\n\t\n\tfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n\t  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyFocus;\n\t\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  return {\n\t    restrict: 'A',\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n\t        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n\t        if (value === 'true') {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === 'false') {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty('refocus') && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFormlyFormController.$inject = [\"formlyUsability\", \"formlyWarn\", \"formlyConfig\", \"$parse\", \"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar _slice = Array.prototype.slice;\n\texports['default'] = FormlyFormController;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tfunction isFieldGroup(field) {\n\t  return field && !!field.fieldGroup;\n\t}\n\t\n\t// @ngInject\n\t\n\tfunction FormlyFormController(formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\t\n\t  setupOptions();\n\t  $scope.model = $scope.model || {};\n\t  setupFields();\n\t\n\t  // watch the model and evaluate watch expressions that depend on it.\n\t  if (!$scope.options.manualModelWatcher) {\n\t    $scope.$watch('model', onModelOrFormStateChange, true);\n\t  } else if (_angularFix2['default'].isFunction($scope.options.manualModelWatcher)) {\n\t    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true);\n\t  }\n\t\n\t  if ($scope.options.formState) {\n\t    $scope.$watch('options.formState', onModelOrFormStateChange, true);\n\t  }\n\t\n\t  function onModelOrFormStateChange() {\n\t    _angularFix2['default'].forEach($scope.fields, runFieldExpressionProperties);\n\t  }\n\t\n\t  function validateFormControl(formControl, promise) {\n\t    var validate = formControl.$validate;\n\t    if (promise) {\n\t      promise.then(function () {\n\t        return validate.apply(formControl);\n\t      });\n\t    } else {\n\t      validate();\n\t    }\n\t  }\n\t\n\t  function runFieldExpressionProperties(field, index) {\n\t    var model = field.model || $scope.model;\n\t    var promise = field.runExpressions && field.runExpressions();\n\t    if (field.hideExpression) {\n\t      // can't use hide with expressionProperties reliably\n\t      var val = model[field.key];\n\t      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n\t    }\n\t    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n\t      if (_angularFix2['default'].isArray(field.formControl)) {\n\t        _angularFix2['default'].forEach(field.formControl, function (formControl) {\n\t          validateFormControl(formControl, promise);\n\t        });\n\t      } else {\n\t        validateFormControl(field.formControl, promise);\n\t      }\n\t    }\n\t  }\n\t\n\t  function setupFields() {\n\t    $scope.fields = $scope.fields || [];\n\t\n\t    checkDeprecatedOptions($scope.options);\n\t\n\t    var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\t\n\t    if (!_angularFix2['default'].isArray(fieldTransforms)) {\n\t      fieldTransforms = [fieldTransforms];\n\t    }\n\t\n\t    _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n\t      if (fieldTransform) {\n\t        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n\t        if (!$scope.fields) {\n\t          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n\t        }\n\t      }\n\t    });\n\t\n\t    setupModels();\n\t\n\t    if ($scope.options.watchAllExpressions) {\n\t      _angularFix2['default'].forEach($scope.fields, setupHideExpressionWatcher);\n\t    }\n\t\n\t    _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t    _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t  }\n\t\n\t  function checkDeprecatedOptions(options) {\n\t    if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n\t      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n\t    } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n\t      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n\t    }\n\t  }\n\t\n\t  function setupOptions() {\n\t    formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n\t    $scope.options = $scope.options || {};\n\t    $scope.options.formState = $scope.options.formState || {};\n\t\n\t    _angularFix2['default'].extend($scope.options, {\n\t      updateInitialValue: updateInitialValue,\n\t      resetModel: resetModel\n\t    });\n\t  }\n\t\n\t  function updateInitialValue() {\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      if (isFieldGroup(field) && field.options) {\n\t        field.options.updateInitialValue();\n\t      } else {\n\t        field.updateInitialValue();\n\t      }\n\t    });\n\t  }\n\t\n\t  function resetModel() {\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      if (isFieldGroup(field) && field.options) {\n\t        field.options.resetModel();\n\t      } else if (field.resetModel) {\n\t        field.resetModel();\n\t      }\n\t    });\n\t  }\n\t\n\t  function setupModels() {\n\t    // a set of field models that are already watched (the $scope.model will have its own watcher)\n\t    var watchedModels = [$scope.model];\n\t    // we will not set up automatic model watchers if manual mode is set\n\t    var manualModelWatcher = $scope.options.manualModelWatcher;\n\t\n\t    if ($scope.options.formState) {\n\t      // $scope.options.formState will have its own watcher\n\t      watchedModels.push($scope.options.formState);\n\t    }\n\t\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      var isNewModel = initModel(field);\n\t\n\t      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n\t        $scope.$watch(function () {\n\t          return field.model;\n\t        }, onModelOrFormStateChange, true);\n\t        watchedModels.push(field.model);\n\t      }\n\t    });\n\t  }\n\t\n\t  function setupHideExpressionWatcher(field, index) {\n\t    if (field.hideExpression) {\n\t      (function () {\n\t        // can't use hide with expressionProperties reliably\n\t        var model = field.model || $scope.model;\n\t        $scope.$watch(function hideExpressionWatcher() {\n\t          var val = model[field.key];\n\t          return evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n\t        }, function (hide) {\n\t          return field.hide = hide;\n\t        }, true);\n\t      })();\n\t    }\n\t  }\n\t\n\t  function initModel(field) {\n\t    var isNewModel = true;\n\t\n\t    if (_angularFix2['default'].isString(field.model)) {\n\t      (function () {\n\t        var expression = field.model;\n\t\n\t        isNewModel = !referencesCurrentlyWatchedModel(expression);\n\t\n\t        field.model = resolveStringModel(expression);\n\t\n\t        $scope.$watch(function () {\n\t          return resolveStringModel(expression);\n\t        }, function (model) {\n\t          return field.model = model;\n\t        });\n\t      })();\n\t    }\n\t\n\t    return isNewModel;\n\t\n\t    function resolveStringModel(expression) {\n\t      var index = $scope.fields.indexOf(field);\n\t      var model = evalCloseToFormlyExpression(expression, undefined, field, index, { model: $scope.model });\n\t\n\t      if (!model) {\n\t        throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n\t      }\n\t\n\t      return model;\n\t    }\n\t  }\n\t\n\t  function referencesCurrentlyWatchedModel(expression) {\n\t    return ['model', 'formState'].some(function (item) {\n\t      return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n\t    });\n\t  }\n\t\n\t  function attachKey(field, index) {\n\t    if (!isFieldGroup(field)) {\n\t      field.key = field.key || index || 0;\n\t    }\n\t  }\n\t\n\t  function setupWatchers(field, index) {\n\t    if (!_angularFix2['default'].isDefined(field.watcher)) {\n\t      return;\n\t    }\n\t    var watchers = field.watcher;\n\t    if (!_angularFix2['default'].isArray(watchers)) {\n\t      watchers = [watchers];\n\t    }\n\t    _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n\t      if (!_angularFix2['default'].isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n\t        throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n\t      }\n\t      var watchExpression = getWatchExpression(watcher, field, index);\n\t      var watchListener = getWatchListener(watcher, field, index);\n\t\n\t      var type = watcher.type || '$watch';\n\t      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t    });\n\t  }\n\t\n\t  function getWatchExpression(watcher, field, index) {\n\t    var watchExpression = undefined;\n\t    if (!_angularFix2['default'].isUndefined(watcher.expression)) {\n\t      watchExpression = watcher.expression;\n\t    } else if (field.key) {\n\t      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']';\n\t    }\n\t    if (_angularFix2['default'].isFunction(watchExpression)) {\n\t      (function () {\n\t        // wrap the field's watch expression so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalExpression = watchExpression;\n\t        watchExpression = function formlyWatchExpression() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalExpression.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n\t      })();\n\t    } else if (field.model) {\n\t      watchExpression = $parse(watchExpression).bind(null, $scope, { model: field.model });\n\t    }\n\t    return watchExpression;\n\t  }\n\t\n\t  function getWatchListener(watcher, field, index) {\n\t    var watchListener = watcher.listener;\n\t    if (_angularFix2['default'].isFunction(watchListener) || watcher.runFieldExpressions) {\n\t      (function () {\n\t        // wrap the field's watch listener so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalListener = watchListener;\n\t        watchListener = function formlyWatchListener() {\n\t          var value = undefined;\n\t          if (originalListener) {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            value = originalListener.apply(undefined, _toConsumableArray(args));\n\t          }\n\t          if (watcher.runFieldExpressions) {\n\t            runFieldExpressionProperties(field, index);\n\t          }\n\t          return value;\n\t        };\n\t        watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n\t      })();\n\t    }\n\t    return watchListener;\n\t  }\n\t\n\t  function modifyArgs(watcher, index) {\n\t    for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      originalArgs[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t  }\n\t\n\t  function evalCloseToFormlyExpression(expression, val, field, index) {\n\t    var extraLocals = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\t\n\t    extraLocals = _angularFix2['default'].extend(getFormlyFieldLikeLocals(field, index), extraLocals);\n\t    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t  }\n\t\n\t  function getFormlyFieldLikeLocals(field, index) {\n\t    // this makes it closer to what a regular formlyExpression would be\n\t    return {\n\t      model: field.model,\n\t      options: field,\n\t      index: index,\n\t      formState: $scope.options.formState,\n\t      originalModel: $scope.model,\n\t      formOptions: $scope.options,\n\t      formId: $scope.formId\n\t    };\n\t  }\n\t}\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyForm.$inject = [\"formlyUsability\", \"formlyWarn\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyForm;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n\t  var currentFormId = 1;\n\t  return {\n\t    restrict: 'AE',\n\t    template: formlyFormGetTemplate,\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: '=',\n\t      model: '=',\n\t      form: '=?',\n\t      options: '=?'\n\t    },\n\t    controller: 'FormlyFormController',\n\t    link: formlyFormLink\n\t  };\n\t\n\t  function formlyFormGetTemplate(el, attrs) {\n\t    var rootEl = getRootEl();\n\t    var fieldRootEl = getFieldRootEl();\n\t    var formId = 'formly_' + currentFormId++;\n\t    var parentFormAttributes = '';\n\t    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t    }\n\t    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\t\n\t    function getRootEl() {\n\t      return attrs.rootEl || 'ng-form';\n\t    }\n\t\n\t    function getFieldRootEl() {\n\t      return attrs.fieldRootEl || 'div';\n\t    }\n\t\n\t    function getHideDirective() {\n\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n\t    }\n\t\n\t    function getTrackBy() {\n\t      if (!attrs.trackBy) {\n\t        return '';\n\t      } else {\n\t        return 'track by ' + attrs.trackBy;\n\t      }\n\t    }\n\t\n\t    function getFormName() {\n\t      var formName = formId;\n\t      var bindName = attrs.bindName;\n\t      if (bindName) {\n\t        if (_angularFix2['default'].version.minor < 3) {\n\t          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n\t        }\n\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n\t      }\n\t      return formName;\n\t    }\n\t\n\t    function getTranscludeClass() {\n\t      return attrs.transcludeClass || '';\n\t    }\n\t\n\t    function copyAttributes(attributes) {\n\t      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n\t      var arrayAttrs = [];\n\t      _angularFix2['default'].forEach(attributes, function (_ref) {\n\t        var nodeName = _ref.nodeName;\n\t        var value = _ref.value;\n\t\n\t        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n\t          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n\t        }\n\t      });\n\t      return arrayAttrs.join(' ');\n\t    }\n\t  }\n\t\n\t  function formlyFormLink(scope, el, attrs) {\n\t    setFormController();\n\t    fixChromeAutocomplete();\n\t\n\t    function setFormController() {\n\t      var formId = attrs.name;\n\t      scope.formId = formId;\n\t      scope.theFormlyForm = scope[formId];\n\t      if (attrs.form) {\n\t        var getter = $parse(attrs.form);\n\t        var setter = getter.assign;\n\t        var parentForm = getter(scope.$parent);\n\t        if (parentForm) {\n\t          scope.theFormlyForm = parentForm;\n\t          if (scope[formId]) {\n\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t          }\n\t\n\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t          // to children forms :-( This line was added to solve this issue:\n\t          // https://github.com/formly-js/angular-formly/issues/287\n\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t          // so I expect it will remain this way for the life of angular 1.x\n\t          el.removeData('$formController');\n\t        } else {\n\t          setter(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t        /* eslint no-console:0 */\n\t        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n\t      }\n\t    }\n\t\n\t    /*\n\t     * chrome autocomplete lameness\n\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t     */\n\t    function fixChromeAutocomplete() {\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement('input');\n\t        input.setAttribute('autocomplete', 'address-level4');\n\t        input.setAttribute('hidden', 'true');\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  }\n\t\n\t  // stateless util functions\n\t  function toKebabCase(string) {\n\t    if (string) {\n\t      return string.replace(/([A-Z])/g, function ($1) {\n\t        return '-' + $1.toLowerCase();\n\t      });\n\t    } else {\n\t      return '';\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _providersFormlyApiCheck = __webpack_require__(11);\n\t\n\tvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\t\n\tvar _otherDocsBaseUrl = __webpack_require__(3);\n\t\n\tvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\t\n\tvar _providersFormlyUsability = __webpack_require__(13);\n\t\n\tvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\t\n\tvar _providersFormlyConfig = __webpack_require__(12);\n\t\n\tvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\t\n\tvar _providersFormlyValidationMessages = __webpack_require__(14);\n\t\n\tvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\t\n\tvar _servicesFormlyUtil = __webpack_require__(17);\n\t\n\tvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\t\n\tvar _servicesFormlyWarn = __webpack_require__(18);\n\t\n\tvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\t\n\tvar _directivesFormlyCustomValidation = __webpack_require__(5);\n\t\n\tvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\t\n\tvar _directivesFormlyField = __webpack_require__(6);\n\t\n\tvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\t\n\tvar _directivesFormlyFocus = __webpack_require__(7);\n\t\n\tvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\t\n\tvar _directivesFormlyForm = __webpack_require__(9);\n\t\n\tvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\t\n\tvar _directivesFormlyFormController = __webpack_require__(8);\n\t\n\tvar _directivesFormlyFormController2 = _interopRequireDefault(_directivesFormlyFormController);\n\t\n\tvar _runFormlyNgModelAttrsManipulator = __webpack_require__(16);\n\t\n\tvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\t\n\tvar _runFormlyCustomTags = __webpack_require__(15);\n\t\n\tvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\t\n\tvar ngModuleName = 'formly';\n\t\n\texports['default'] = ngModuleName;\n\t\n\tvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\t\n\tngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\n\tngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\n\tngModule.constant('formlyVersion', (\"8.4.1\")); // <-- webpack variable\n\t\n\tngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\n\tngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\t\n\tngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\n\tngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\n\tngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\t\n\tngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\n\tngModule.directive('formlyField', _directivesFormlyField2['default']);\n\tngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\n\tngModule.directive('formlyForm', _directivesFormlyForm2['default']);\n\tngModule.controller('FormlyFormController', _directivesFormlyFormController2['default']);\n\t\n\tngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\n\tngModule.run(_runFormlyCustomTags2['default']);\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _apiCheck = __webpack_require__(4);\n\t\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\tvar apiCheck = (0, _apiCheck2['default'])({\n\t  output: {\n\t    prefix: 'angular-formly:',\n\t    docsBaseUrl: __webpack_require__(3)\n\t  }\n\t});\n\t\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!_angularFix2['default'].isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\t\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\t\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\t\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\t\n\tvar apiCheckProperty = apiCheck.func;\n\t\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  'throw': apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\t\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\t\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\t\n\tvar templateManipulators = apiCheck.shape({\n\t  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n\t  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n\t}).strict.nullable;\n\t\n\tvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar watcherChecker = apiCheck.typeOrArrayOf(apiCheck.shape({\n\t  expression: formlyExpression.optional,\n\t  listener: formlyExpression.optional,\n\t  runFieldExpressions: apiCheck.bool.optional\n\t}));\n\t\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: modelChecker.optional,\n\t  originalModel: modelChecker.optional,\n\t  className: apiCheck.string.optional,\n\t  id: apiCheck.string.optional,\n\t  name: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  extras: apiCheck.shape({\n\t    validateOnModelChange: apiCheck.bool.optional,\n\t    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n\t  }).strict.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: watcherChecker.optional,\n\t  validators: validatorChecker.optional,\n\t  asyncValidators: validatorChecker.optional,\n\t  parsers: apiCheck.arrayOf(formlyExpression).optional,\n\t  formatters: apiCheck.arrayOf(formlyExpression).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: apiCheck.bool.nullable.optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\t\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t  parseKeyArrays: apiCheck.bool.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n\t  watchAllExpressions: apiCheck.bool.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n\t  data: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  // danger. Nested field groups wont get api-checked...\n\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  watcher: watcherChecker.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  data: apiCheck.object.optional,\n\t  model: modelChecker.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\t\n\tvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  'extends': apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\t\n\t_angularFix2['default'].extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\t\n\texports['default'] = apiCheck;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyErrorAndWarningsUrlPrefix\", \"formlyApiCheck\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyConfig;\n\t\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\t  var _this2 = this;\n\t\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = 'default';\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    getTypes: getTypes,\n\t    getTypeHeritage: getTypeHeritage,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      fieldTransform: [],\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      parseKeyArrays: false,\n\t      defaultHideDirective: 'ng-if',\n\t      getFieldId: null\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function $get() {\n\t      return _this2;\n\t    }\n\t  });\n\t\n\t  function setType(options) {\n\t    if (_angularFix2['default'].isArray(options)) {\n\t      var _ret = (function () {\n\t        var allTypes = [];\n\t        _angularFix2['default'].forEach(options, function (item) {\n\t          allTypes.push(setType(item));\n\t        });\n\t        return {\n\t          v: allTypes\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret === 'object') return _ret.v;\n\t    } else if (_angularFix2['default'].isObject(options)) {\n\t      checkType(options);\n\t      if (options['extends']) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t      return typeMap[options.name];\n\t    } else {\n\t      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n\t    }\n\t  }\n\t\n\t  function checkType(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: 'formlyConfig.setType',\n\t      url: 'settype-validation-failed'\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, 'types');\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\t\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options['extends'], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\t\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\t\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = ['$scope', '$controller'];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\t\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!_angularFix2['default'].isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions || {};\n\t    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n\t    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var extendsDefaultOptions = extendsDO(opts, scope);\n\t        var mergedDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n\t        }\n\t        _otherUtils2['default'].reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions);\n\t        return extenderOptionsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var newDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t        return optionsDO(newDefaultOptions, scope);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\t\n\t  function getTypes() {\n\t    return typeMap;\n\t  }\n\t\n\t  function getTypeHeritage(parent) {\n\t    var heritage = [];\n\t    var type = parent;\n\t    if (_angularFix2['default'].isString(type)) {\n\t      type = getType(parent);\n\t    }\n\t    parent = type['extends'];\n\t    while (parent) {\n\t      type = getType(parent);\n\t      heritage.push(type);\n\t      parent = type['extends'];\n\t    }\n\t    return heritage;\n\t  }\n\t\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\t\n\t    _function: while (_again) {\n\t      var options = _x,\n\t          name = _x2;\n\t      _again = false;\n\t\n\t      if (_angularFix2['default'].isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (_angularFix2['default'].isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (_angularFix2['default'].isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _x2 = undefined;\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\t\n\t  function getOptionsTypes(options) {\n\t    if (_angularFix2['default'].isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!_angularFix2['default'].isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\t\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(' ') || defaultWrapperName;\n\t  }\n\t\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\t\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n\t    if (shouldThrow) {\n\t      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n\t    }\n\t  }\n\t\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n\t    }\n\t  }\n\t\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\t\n\t  function getWrapperByType(type) {\n\t    /* eslint prefer-const:0 */\n\t    var wrappers = [];\n\t    for (var _name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(_name)) {\n\t        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[_name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\t\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\t\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return undefined;\n\t    }\n\t    if (!_angularFix2['default'].isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\t\n\t  function warn() {\n\t    if (!_this.disableWarnings && console.warn) {\n\t      /* eslint no-console:0 */\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      console.warn.apply(console, _toConsumableArray(args));\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyUsability;\n\t\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    getErrorMessage: getErrorMessage,\n\t    $get: function $get() {\n\t      return _this;\n\t    }\n\t  });\n\t\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n\t  }\n\t\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\t\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = '';\n\t    if (errorInfoSlug !== null) {\n\t      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n\t    }\n\t    return 'Formly Error: ' + message + '. ' + url;\n\t  }\n\t\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: 'formlyConfig.setWrapper',\n\t      urlSuffix: 'setwrapper-validation-failed'\n\t    });\n\t  }\n\t\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = '<formly-transclude></formly-transclude>';\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyValidationMessages;\n\t\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\t\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\t\n\t  return validationMessages;\n\t\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\t\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\t\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n\t        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\taddCustomTags.$inject = [\"$document\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = addCustomTags;\n\t\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  // IE8 check ->\n\t  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n\t  if ($document && $document.documentMode < 9) {\n\t    (function () {\n\t      var document = $document.get(0);\n\t      // add the custom elements that we need for formly\n\t      var customElements = ['formly-field', 'formly-form'];\n\t      _angularFix2['default'].forEach(customElements, function (el) {\n\t        document.createElement(el);\n\t      });\n\t    })();\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\texports['default'] = addFormlyNgModelAttrsManipulator;\n\t\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    var node = document.createElement('div');\n\t    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n\t    if (skip === true) {\n\t      return template;\n\t    }\n\t    node.innerHTML = template;\n\t\n\t    var modelNodes = getNgModelNodes(node, skip);\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelNodes, 'id', scope.id);\n\t    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\t\n\t    addValidation();\n\t    alterNgModelAttr();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t    addNgModelElAttrs();\n\t\n\t    return node.innerHTML;\n\t\n\t    function addValidation() {\n\t      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n\t        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n\t      }\n\t    }\n\t\n\t    function alterNgModelAttr() {\n\t      if (isPropertyAccessor(options.key)) {\n\t        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n\t      }\n\t    }\n\t\n\t    function addModelOptions() {\n\t      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n\t        if (options.modelOptions.getterSetter) {\n\t          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n\t        }\n\t      }\n\t    }\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      // Feel free to make this more simple :-)\n\t      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n\t        /* eslint complexity:[2, 14] */\n\t        var attrVal = undefined,\n\t            attrName = undefined;\n\t        var ref = 'options.templateOptions[\\'' + name + '\\']';\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = _angularFix2['default'].isDefined(toVal);\n\t        var inEp = _angularFix2['default'].isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.statement && inTo) {\n\t          attrName = val.statement;\n\t          if (_angularFix2['default'].isString(to[name])) {\n\t            attrVal = '$eval(' + ref + ')';\n\t          } else if (_angularFix2['default'].isFunction(to[name])) {\n\t            attrVal = ref + '(model[options.key], options, this, $event)';\n\t          } else {\n\t            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {\n\t            /* eslint no-empty:0 */\n\t            // empty to illustrate that a boolean will not be added via val.bound\n\t            // if you want it added via val.bound, then put it in expressionProperties\n\t          }\n\t        } else if (val.bound && inTo) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          }\n\t\n\t        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t\n\t    function addNgModelElAttrs() {\n\t      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n\t        addRegardlessOfPresence(modelNodes, name, val);\n\t      });\n\t    }\n\t  }\n\t\n\t  // Utility functions\n\t  function getNgModelNodes(node, skip) {\n\t    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n\t    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n\t    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n\t    try {\n\t      return node.querySelectorAll(query);\n\t    } catch (e) {\n\t      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n\t      //it should be removed when IE8 support is dropped\n\t      return getNgModelNodesFallback(node, skip);\n\t    }\n\t  }\n\t\n\t  function getNgModelNodesFallback(node, skip) {\n\t    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n\t    var matchingNgModelNodes = [];\n\t\n\t    //make sure this array is compatible with NodeList type by adding an 'item' function\n\t    matchingNgModelNodes.item = function (i) {\n\t      return this[i];\n\t    };\n\t\n\t    for (var i = 0; i < allNgModelNodes.length; i++) {\n\t      var ngModelNode = allNgModelNodes[i];\n\t      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n\t        matchingNgModelNodes.push(ngModelNode);\n\t      }\n\t    }\n\t\n\t    return matchingNgModelNodes;\n\t  }\n\t\n\t  function nodeMatches(node, selector) {\n\t    var div = document.createElement('div');\n\t    div.innerHTML = node.outerHTML;\n\t    return div.querySelector(selector);\n\t  }\n\t\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: 'formly-focus'\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = ['required', 'disabled'];\n\t    var bothAttributeAndBound = ['pattern', 'minlength'];\n\t    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\t    var attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type'];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push('maxlength');\n\t    } else {\n\t      boundOnly.push('maxlength');\n\t    }\n\t\n\t    _angularFix2['default'].forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(statementOnly, function (item) {\n\t      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { statement: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\t\n\t  function getEpValue(ep, name) {\n\t    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n\t  }\n\t\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\t\n\t  function addRegardlessOfPresence(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      node.setAttribute(attr, val);\n\t    });\n\t  }\n\t\n\t  function isPropertyAccessor(key) {\n\t    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyUtil;\n\t\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return _otherUtils2['default'];\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\texports['default'] = formlyWarn;\n\t\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// dist/formly.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35552b86acf7dd684806","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _indexCommon = require('./index.common');\n\nvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\nexports['default'] = _indexCommon2['default'];\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./index.js","import index from './index.common'\nexport default index\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./index.js","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar angular = require('angular');\n\n/* istanbul ignore next */\nif (!angular.version) {\n  angular = window.angular;\n}\nexports['default'] = angular;\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./angular-fix/index.js","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nlet angular = require('angular')\n\n/* istanbul ignore next */\nif (!angular.version) {\n  angular = window.angular\n}\nexport default angular\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./angular-fix/index.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = {\n  containsSelector: containsSelector, containsSpecialChar: containsSpecialChar, formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName,\n  arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n};\n\nfunction containsSelector(string) {\n  return containsSpecialChar(string, '.') || containsSpecialChar(string, '[') && containsSpecialChar(string, ']');\n}\n\nfunction containsSpecialChar(a, b) {\n  if (!a || !a.indexOf) {\n    return false;\n  }\n  return a.indexOf(b) !== -1;\n}\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (_angularFix2['default'].isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals);\n  } else {\n    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id;\n  }\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\nfunction reverseDeepMerge(dest) {\n  _angularFix2['default'].forEach(arguments, function (src, index) {\n    if (!index) {\n      return;\n    }\n    _angularFix2['default'].forEach(src, function (val, prop) {\n      if (!_angularFix2['default'].isDefined(dest[prop])) {\n        if (typeof val === 'object' && val !== null) {\n          dest[prop] = Object.assign(Object.create(Object.getPrototypeOf(val)), val);\n        } else {\n          dest[prop] = val;\n        }\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n  return dest;\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) {\n    // not a jQuery or jqLite object -> wrap it\n    el = _angularFix2['default'].element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for (var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\nfunction arrayify(obj) {\n  if (obj && !_angularFix2['default'].isArray(obj)) {\n    obj = [obj];\n  } else if (!obj) {\n    obj = [];\n  }\n  return obj;\n}\n\nfunction extendFunction() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function extendedFunction() {\n    var args = arguments;\n    fns.forEach(function (fn) {\n      return fn.apply(null, args);\n    });\n  };\n}\n\nfunction extendArray(primary, secondary, property) {\n  if (property) {\n    primary = primary[property];\n    secondary = secondary[property];\n  }\n  if (secondary && primary) {\n    _angularFix2['default'].forEach(secondary, function (item) {\n      if (primary.indexOf(item) === -1) {\n        primary.push(item);\n      }\n    });\n    return primary;\n  } else if (secondary) {\n    return secondary;\n  } else {\n    return primary;\n  }\n}\n\nfunction startsWith(str, search) {\n  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n    return str.length >= search.length && str.substring(0, search.length) === search;\n  } else {\n    return false;\n  }\n}\n\nfunction contains(str, search) {\n  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n    return str.length >= search.length && str.indexOf(search) !== -1;\n  } else {\n    return false;\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./other/utils.js","import angular from 'angular-fix'\n\nexport default {\n  containsSelector, containsSpecialChar, formlyEval, getFieldId, reverseDeepMerge, findByNodeName,\n  arrayify, extendFunction, extendArray, startsWith, contains,\n}\n\nfunction containsSelector(string) {\n  return containsSpecialChar(string, '.') || (containsSpecialChar(string, '[') && containsSpecialChar(string, ']'))\n}\n\nfunction containsSpecialChar(a, b) {\n  if (!a || !a.indexOf) {\n    return false\n  }\n  return a.indexOf(b) !== -1\n}\n\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals)\n  } else {\n    return scope.$eval(expression, angular.extend({$viewValue, $modelValue}, extraLocals))\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id\n  }\n  let type = options.type\n  if (!type && options.template) {\n    type = 'template'\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl'\n  }\n\n  return [formId, type, options.key, index].join('_')\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        if (typeof val === 'object' && val !== null) {\n          dest[prop] = Object.assign(Object.create(Object.getPrototypeOf(val)), val)\n        } else {\n          dest[prop] = val\n        }\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val)\n      }\n    })\n  })\n  return dest\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el)\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el\n  }\n\n  const c = el.children()\n  for (let i = 0; c && i < c.length; i++) {\n    const node = findByNodeName(c[i], nodeName)\n    if (node) {\n      return node\n    }\n  }\n}\n\n\nfunction arrayify(obj) {\n  if (obj && !angular.isArray(obj)) {\n    obj = [obj]\n  } else if (!obj) {\n    obj = []\n  }\n  return obj\n}\n\n\nfunction extendFunction(...fns) {\n  return function extendedFunction() {\n    const args = arguments\n    fns.forEach(fn => fn.apply(null, args))\n  }\n}\n\nfunction extendArray(primary, secondary, property) {\n  if (property) {\n    primary = primary[property]\n    secondary = secondary[property]\n  }\n  if (secondary && primary) {\n    angular.forEach(secondary, function(item) {\n      if (primary.indexOf(item) === -1) {\n        primary.push(item)\n      }\n    })\n    return primary\n  } else if (secondary) {\n    return secondary\n  } else {\n    return primary\n  }\n}\n\nfunction startsWith(str, search) {\n  if (angular.isString(str) && angular.isString(search)) {\n    return str.length >= search.length && str.substring(0, search.length) === search\n  } else {\n    return false\n  }\n}\n\nfunction contains(str, search) {\n  if (angular.isString(str) && angular.isString(search)) {\n    return str.length >= search.length && str.indexOf(search) !== -1\n  } else {\n    return false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./other/utils.js","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + VERSION + \"/other/ERRORS_AND_WARNINGS.md#\";\nmodule.exports = exports[\"default\"];\n\n\n// WEBPACK FOOTER //\n// ./other/docsBaseUrl.js","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n// module id = 4\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyCustomValidation;\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      var opts = scope.options;\n      opts.validation.messages = opts.validation.messages || {};\n      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n        opts.validation.messages[key] = function () {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n        };\n      });\n\n      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\n      function addValidatorToPipeline(isAsync, validator, name) {\n        setupMessage(validator, name);\n        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n        if (useNewValidatorsApi) {\n          setupWithValidators(validator, name, isAsync);\n        } else {\n          setupWithParsers(validator, name, isAsync);\n        }\n      }\n\n      function setupMessage(validator, name) {\n        var message = validator.message;\n        if (message) {\n          opts.validation.messages[name] = function () {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        }\n      }\n\n      function setupWithValidators(validator, name, isAsync) {\n        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\n        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n        };\n      }\n\n      function setupWithParsers(validator, name, isAsync) {\n        var inFlightValidator = undefined;\n        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n          if (isAsync) {\n            ctrl.$pending = ctrl.$pending || {};\n            ctrl.$pending[name] = true;\n            inFlightValidator = isValid;\n            isValid.then(function () {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, true);\n              }\n            })['catch'](function () {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, false);\n              }\n            })['finally'](function () {\n              var $pending = ctrl.$pending || {};\n              if (Object.keys($pending).length === 1) {\n                delete ctrl.$pending;\n              } else {\n                delete ctrl.$pending[name];\n              }\n            });\n          } else {\n            ctrl.$setValidity(name, isValid);\n          }\n          return viewValue;\n        });\n      }\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./directives/formly-custom-validation.js","import angular from 'angular-fix'\nexport default formlyCustomValidation\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      const opts = scope.options\n      opts.validation.messages = opts.validation.messages || {}\n      angular.forEach(opts.validation.messages, (message, key) => {\n        opts.validation.messages[key] = () => {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue)\n        }\n      })\n\n\n      const useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers')\n      angular.forEach(opts.validators, angular.bind(null, addValidatorToPipeline, false))\n      angular.forEach(opts.asyncValidators, angular.bind(null, addValidatorToPipeline, true))\n\n      function addValidatorToPipeline(isAsync, validator, name) {\n        setupMessage(validator, name)\n        validator = angular.isObject(validator) ? validator.expression : validator\n        if (useNewValidatorsApi) {\n          setupWithValidators(validator, name, isAsync)\n        } else {\n          setupWithParsers(validator, name, isAsync)\n        }\n      }\n\n      function setupMessage(validator, name) {\n        const message = validator.message\n        if (message) {\n          opts.validation.messages[name] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue)\n          }\n        }\n      }\n\n      function setupWithValidators(validator, name, isAsync) {\n        const validatorCollection = isAsync ? '$asyncValidators' : '$validators'\n\n        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue)\n        }\n      }\n\n      function setupWithParsers(validator, name, isAsync) {\n        let inFlightValidator\n        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n          const isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue)\n          if (isAsync) {\n            ctrl.$pending = ctrl.$pending || {}\n            ctrl.$pending[name] = true\n            inFlightValidator = isValid\n            isValid.then(() => {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, true)\n              }\n            }).catch(() => {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, false)\n              }\n            }).finally(() => {\n              const $pending = ctrl.$pending || {}\n              if (Object.keys($pending).length === 1) {\n                delete ctrl.$pending\n              } else {\n                delete ctrl.$pending[name]\n              }\n            })\n          } else {\n            ctrl.$setValidity(name, isValid)\n          }\n          return viewValue\n        })\n      }\n    },\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-custom-validation.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _apiCheck = require('api-check');\n\nvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\nexports['default'] = formlyField;\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  var arrayify = formlyUtil.arrayify;\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    require: '?^formlyForm',\n    scope: {\n      options: '=',\n      model: '=',\n      originalModel: '=?',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?' },\n    // TODO require form in a breaking release\n    controller: FormlyFieldController,\n    link: fieldLink\n  };\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n    /* eslint max-statements:[2, 37] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup();\n      return;\n    }\n\n    var fieldType = getFieldType($scope.options);\n    simplifyLife($scope.options);\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n    extendOptionsWithDefaults($scope.options, $scope.index);\n    checkApi($scope.options);\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldIdAndName();\n    setDefaultValue();\n    setInitialValue();\n    runExpressions();\n    watchExpressions();\n    addValidationMessages($scope.options);\n    invokeControllers($scope, $scope.options, fieldType);\n\n    // function definitions\n    function runExpressions() {\n      var deferred = $q.defer();\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function runExpressionsOnNextTick() {\n        var promises = [];\n        var field = $scope.options;\n        var currentValue = valueGetterSetter();\n        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n          var setter = $parse(prop).assign;\n          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue)).then(function setFieldValue(value) {\n            setter(field, value);\n          });\n          promises.push(promise);\n        });\n        $q.all(promises).then(function () {\n          deferred.resolve();\n        });\n      }, 0, false);\n      return deferred.promise;\n    }\n\n    function watchExpressions() {\n      if ($scope.formOptions.watchAllExpressions) {\n        (function () {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          _angularFix2['default'].forEach(field.expressionProperties, function watchExpression(expression, prop) {\n            var setter = $parse(prop).assign;\n            $scope.$watch(function expressionPropertyWatcher() {\n              return formlyUtil.formlyEval($scope, expression, currentValue, currentValue);\n            }, function expressionPropertyListener(value) {\n              setter(field, value);\n            }, true);\n          });\n        })();\n      }\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined;\n      }\n      if (_angularFix2['default'].isDefined(newVal)) {\n        parseSet($scope.options.key, $scope.model, newVal);\n      }\n      return parseGet($scope.options.key, $scope.model);\n    }\n\n    function shouldNotUseParseKey(key) {\n      return _angularFix2['default'].isNumber(key) || !formlyUtil.containsSelector(key);\n    }\n\n    function keyContainsArrays(key) {\n      return (/\\[\\d{1,}\\]/.test(key)\n      );\n    }\n\n    function deepAssign(obj, prop, value) {\n      if (_angularFix2['default'].isString(prop)) {\n        prop = prop.replace(/\\[(\\w+)\\]/g, '.$1').split('.');\n      }\n\n      if (prop.length > 1) {\n        var e = prop.shift();\n        obj[e] = obj[e] || isNaN(prop[0]) ? {} : [];\n        deepAssign(obj[e], prop, value);\n      } else {\n        obj[prop[0]] = value;\n      }\n    }\n\n    function parseSet(key, model, newVal) {\n      // If either of these are null/undefined then just return undefined\n      if (!key && key !== 0 || !model) {\n        return;\n      }\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        model[key] = newVal;\n      } else if (formlyConfig.extras.parseKeyArrays && keyContainsArrays(key)) {\n        deepAssign($scope.model, key, newVal);\n      } else {\n        var setter = $parse($scope.options.key).assign;\n        if (setter) {\n          setter($scope.model, newVal);\n        }\n      }\n    }\n\n    function parseGet(key, model) {\n      // If either of these are null/undefined then just return undefined\n      if (!key && key !== 0 || !model) {\n        return undefined;\n      }\n\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        return model[key];\n      } else {\n        return $parse(key)(model);\n      }\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        originalModel: options.model,\n        extras: {},\n        data: {},\n        templateOptions: {},\n        validation: {}\n      });\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions;\n      $scope.formOptions = $scope.formOptions || {};\n    }\n\n    function setFieldIdAndName() {\n      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n      } else {\n        var formName = $scope.form && $scope.form.$name || $scope.formId;\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n      }\n      $scope.options.id = $scope.id;\n      $scope.name = $scope.options.name || $scope.options.id;\n      $scope.options.name = $scope.name;\n    }\n\n    function setDefaultValue() {\n      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions);\n      }\n      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n      _angularFix2['default'].forEach(properOrder, function (typeName) {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n      });\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (_angularFix2['default'].isFunction(extraOptions)) {\n          extraOptions = extraOptions(options, $scope);\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions);\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      var key = options.key || index || 0;\n      _angularFix2['default'].extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key: key,\n        value: options.value || valueGetterSetter,\n        runExpressions: runExpressions,\n        resetModel: resetModel,\n        updateInitialValue: updateInitialValue\n      });\n    }\n\n    function resetModel() {\n      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n      if ($scope.options.formControl) {\n        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n            resetFormControl(formControl, true);\n          });\n        } else {\n          resetFormControl($scope.options.formControl);\n        }\n      }\n      if ($scope.form) {\n        $scope.form.$setUntouched && $scope.form.$setUntouched();\n        $scope.form.$setPristine();\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel) {\n      if (!isMultiNgModel) {\n        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n      }\n\n      formControl.$render();\n      formControl.$setUntouched && formControl.$setUntouched();\n      formControl.$setPristine();\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if (!$scope.$root.$$phase) {\n        $scope.$digest();\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {};\n      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n          };\n        }\n      });\n    }\n\n    function invokeControllers(scope) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n        if (controller) {\n          $controller(controller, { $scope: scope });\n        }\n      });\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {};\n      $scope.options.options.formState = $scope.formState;\n      $scope.to = $scope.options.templateOptions;\n    }\n  }\n\n  // link function\n  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate();\n      return;\n    }\n\n    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n    if (!formlyFormCtrl && scope.options.model) {\n      scope.$watch('options.model', function () {\n        return scope.options.runExpressions();\n      }, true);\n    }\n\n    addAttributes();\n    addClasses();\n\n    var type = getFieldType(scope.options);\n    var args = arguments;\n    var thusly = this;\n    var fieldCount = 0;\n    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n    });\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options);\n      el.addClass('formly-field-group');\n      var extraAttributes = '';\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n        }).join(' ');\n      }\n      var modelValue = 'model';\n      scope.options.form = scope.form;\n      if (scope.options.key) {\n        modelValue = 'model[\\'' + scope.options.key + '\\']';\n      }\n      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes);\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className);\n      }\n      if (scope.options.type) {\n        el.addClass('formly-field-' + scope.options.type);\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString));\n      $compile(el.contents())(scope);\n      return templateString;\n    }\n\n    function watchFormControl(templateString) {\n      var stopWatchingShowError = _angularFix2['default'].noop;\n      if (scope.options.noFormControl) {\n        return;\n      }\n      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\n      if (ngModelNodes.length) {\n        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n          fieldCount++;\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n        });\n      }\n\n      function watchFieldNameOrExistence(name) {\n        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n        var nameExpression = nameExpressionRegex.exec(name);\n        if (nameExpression) {\n          name = $interpolate(name)(scope);\n        }\n        watchFieldExistence(name);\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n          if (formControl) {\n            if (fieldCount > 1) {\n              if (!scope.options.formControl) {\n                scope.options.formControl = [];\n              }\n              scope.options.formControl.push(formControl);\n            } else {\n              scope.options.formControl = formControl;\n            }\n            scope.fc = scope.options.formControl; // shortcut for template authors\n            stopWatchingShowError();\n            addShowMessagesWatcher();\n            addParsers();\n            addFormatters();\n          }\n        });\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n          var options = scope.options;\n          var formControls = arrayify(scope.fc);\n          if (!formControls.some(function (fc) {\n            return fc.$invalid;\n          })) {\n            return false;\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show;\n          } else if (customExpression) {\n            return formControls.some(function (fc) {\n              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n            });\n          } else {\n            return formControls.some(function (fc) {\n              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n              return fc.$touched || noTouchedButDirty;\n            });\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show;\n          scope.showError = show; // shortcut for template authors\n        });\n      }\n\n      function addParsers() {\n        setParsersOrFormatters('parsers');\n      }\n\n      function addFormatters() {\n        setParsersOrFormatters('formatters');\n        var ctrl = scope.fc;\n        var formWasPristine = scope.form.$pristine;\n        if (scope.options.formatters) {\n          (function () {\n            var value = ctrl.$modelValue;\n            ctrl.$formatters.forEach(function (formatter) {\n              value = formatter(value);\n            });\n\n            ctrl.$setViewValue(value);\n            ctrl.$render();\n            ctrl.$setPristine();\n            if (formWasPristine) {\n              scope.form.$setPristine();\n            }\n          })();\n        }\n      }\n\n      function setParsersOrFormatters(which) {\n        var originalThingProp = 'originalParser';\n        if (which === 'formatters') {\n          originalThingProp = 'originalFormatter';\n        }\n\n        // init with type's parsers\n        var things = getThingsFromType(type);\n\n        // get optionsTypes things\n        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\n        // get field's things\n        things = formlyUtil.extendArray(things, scope.options[which]);\n\n        // convert things into formlyExpression things\n        _angularFix2['default'].forEach(things, function (thing, index) {\n          things[index] = getFormlyExpressionThing(thing);\n        });\n\n        var ngModelCtrls = scope.fc;\n        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n          ngModelCtrls = [ngModelCtrls];\n        }\n\n        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n          var _ngModelCtrl;\n\n          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n        });\n\n        function getThingsFromType(theType) {\n          if (!theType) {\n            return [];\n          }\n          if (_angularFix2['default'].isString(theType)) {\n            theType = formlyConfig.getType(theType, true, scope.options);\n          }\n          var typeThings = [];\n\n          // get things from parent\n          if (theType['extends']) {\n            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n          }\n\n          // get own type's things\n          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\n          // get things from optionsTypes\n          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\n          return typeThings;\n        }\n\n        function getThingsFromOptionsTypes() {\n          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n          var optionsTypesThings = [];\n          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n          });\n          return optionsTypesThings;\n        }\n\n        function getFormlyExpressionThing(thing) {\n          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n          return formlyExpressionParserOrFormatterFunction;\n\n          function formlyExpressionParserOrFormatterFunction($viewValue) {\n            var $modelValue = scope.options.value();\n            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n          }\n        }\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args);\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args);\n      }\n    }\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        var chain = $q.when(templateToManipulate);\n        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n          chain = chain.then(function (template) {\n            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n            });\n          });\n        });\n        return chain;\n      };\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    var wrapper = _angularFix2['default'].element('<a></a>');\n    return wrapper.append(el).html();\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type);\n  }\n\n  function getManipulators(options, formOptions) {\n    var preWrapper = [];\n    var postWrapper = [];\n    addManipulators(options.templateManipulators);\n    addManipulators(formOptions.templateManipulators);\n    addManipulators(formlyConfig.templateManipulators);\n    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n\n      var _ref = manipulators || {};\n\n      var _ref$preWrapper = _ref.preWrapper;\n      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n      var _ref$postWrapper = _ref.postWrapper;\n      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType) {\n      if (_angularFix2['default'].isDefined(options[key])) {\n        return options[key];\n      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n        return fieldType[key];\n      }\n    }\n\n    var type = formlyConfig.getType(options.type, true, options);\n    var template = fromOptionsOrType('template', type);\n    var templateUrl = fromOptionsOrType('templateUrl', type);\n    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n    }\n\n    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n  }\n\n  function getTemplate(template, isUrl, options) {\n    var templatePromise = undefined;\n    if (_angularFix2['default'].isFunction(template)) {\n      templatePromise = $q.when(template(options));\n    } else {\n      templatePromise = $q.when(template);\n    }\n\n    if (!isUrl) {\n      return templatePromise;\n    } else {\n      var _ret3 = (function () {\n        var httpOptions = { cache: $templateCache };\n        return {\n          v: templatePromise.then(function (url) {\n            return $http.get(url, httpOptions);\n          }).then(function (response) {\n            return response.data;\n          })['catch'](function handleErrorGettingATemplate(error) {\n            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n          })\n        };\n      })();\n\n      if (typeof _ret3 === 'object') return _ret3.v;\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    var wrapper = getWrapperOption(options, formOptions);\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template);\n      }\n\n      wrapper.forEach(function (aWrapper) {\n        formlyUsability.checkWrapper(aWrapper, options);\n        runApiCheck(aWrapper, options);\n      });\n      var promises = wrapper.map(function (w) {\n        return getTemplate(w.template || w.templateUrl, !w.template);\n      });\n      return $q.all(promises).then(function (wrappersTemplates) {\n        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n        });\n        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n        var totalWrapper = wrappersTemplates.shift();\n        wrappersTemplates.forEach(function (wrapperTemplate) {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n        });\n        return doTransclusion(totalWrapper, template);\n      });\n    };\n  }\n\n  function doTransclusion(wrapper, template) {\n    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper);\n    var transcludeEl = superWrapper.find('formly-transclude');\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n    }\n    transcludeEl.replaceWith(template);\n    return superWrapper.html();\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[2, 6] */\n    var wrapper = options.wrapper;\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return [];\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    var type = formlyConfig.getType(options.type, true, options);\n    if (type && type.wrapper) {\n      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(typeWrappers);\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(formWrappers);\n    }\n\n    // add the default wrapper last\n    var defaultWrapper = formlyConfig.getWrapper();\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper);\n    }\n    return wrapper;\n  }\n\n  function checkApi(options) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n    // validate with the type\n    var type = options.type && formlyConfig.getType(options.type);\n    if (type) {\n      runApiCheck(type, options, true);\n    }\n    if (options.expressionProperties && options.expressionProperties.hide) {\n      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n  }\n\n  function runApiCheck(_ref2, options, forType) {\n    var apiCheck = _ref2.apiCheck;\n    var apiCheckInstance = _ref2.apiCheckInstance;\n    var apiCheckFunction = _ref2.apiCheckFunction;\n    var apiCheckOptions = _ref2.apiCheckOptions;\n\n    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n    if (forType && options.type) {\n      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n      });\n    }\n  }\n\n  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n    /* eslint complexity:[2, 9] */\n    if (!apiCheck) {\n      return;\n    }\n    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n      return;\n    }\n    var fn = apiCheckFunction || 'warn';\n    // this is the new API\n    var checkerObjects = apiCheck(instance);\n    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n      var checker = instance.shape(shape);\n      var checkOptions = _angularFix2['default'].extend({\n        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      }, apiCheckOptions);\n      instance[fn](checker, options[name], checkOptions);\n    });\n  }\n}\n\n// Stateless util functions\nfunction getDefaultOptionsOptionsTypes(type) {\n  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n}\n\nfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./directives/formly-field.js","import angular from 'angular-fix'\nimport apiCheckFactory from 'api-check'\n\nexport default formlyField\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig,\n                     formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  const {arrayify} = formlyUtil\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    require: '?^formlyForm',\n    scope: {\n      options: '=',\n      model: '=',\n      originalModel: '=?',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?', // TODO require form in a breaking release\n    },\n    controller: FormlyFieldController,\n    link: fieldLink,\n  }\n\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n    /* eslint max-statements:[2, 37] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup()\n      return\n    }\n\n    const fieldType = getFieldType($scope.options)\n    simplifyLife($scope.options)\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType)\n    extendOptionsWithDefaults($scope.options, $scope.index)\n    checkApi($scope.options)\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldIdAndName()\n    setDefaultValue()\n    setInitialValue()\n    runExpressions()\n    watchExpressions()\n    addValidationMessages($scope.options)\n    invokeControllers($scope, $scope.options, fieldType)\n\n    // function definitions\n    function runExpressions() {\n      const deferred = $q.defer()\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function runExpressionsOnNextTick() {\n        const promises = []\n        const field = $scope.options\n        const currentValue = valueGetterSetter()\n        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n          const setter = $parse(prop).assign\n          const promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue))\n            .then(function setFieldValue(value) {\n              setter(field, value)\n            })\n          promises.push(promise)\n        })\n        $q.all(promises).then(function() {\n          deferred.resolve()\n        })\n      }, 0, false)\n      return deferred.promise\n    }\n\n    function watchExpressions() {\n      if ($scope.formOptions.watchAllExpressions) {\n        const field = $scope.options\n        const currentValue = valueGetterSetter()\n        angular.forEach(field.expressionProperties, function watchExpression(expression, prop) {\n          const setter = $parse(prop).assign\n          $scope.$watch(function expressionPropertyWatcher() {\n            return formlyUtil.formlyEval($scope, expression, currentValue, currentValue)\n          }, function expressionPropertyListener(value) {\n            setter(field, value)\n          }, true)\n        })\n      }\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined\n      }\n      if (angular.isDefined(newVal)) {\n        parseSet($scope.options.key, $scope.model, newVal)\n      }\n      return parseGet($scope.options.key, $scope.model)\n    }\n\n    function shouldNotUseParseKey(key) {\n      return angular.isNumber(key) || !formlyUtil.containsSelector(key)\n    }\n\n    function keyContainsArrays(key) {\n      return /\\[\\d{1,}\\]/.test(key)\n    }\n\n    function deepAssign(obj, prop, value) {\n      if (angular.isString(prop)) {\n        prop = prop.replace(/\\[(\\w+)\\]/g, '.$1').split('.')\n      }\n\n      if (prop.length > 1) {\n        const e = prop.shift()\n        obj[e] = obj[e] || (isNaN(prop[0])) ? {} : []\n        deepAssign(obj[e], prop, value)\n      } else {\n        obj[prop[0]] = value\n      }\n    }\n\n    function parseSet(key, model, newVal) {\n      // If either of these are null/undefined then just return undefined\n      if ((!key && key !== 0) || !model) {\n        return\n      }\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        model[key] = newVal\n      } else if (formlyConfig.extras.parseKeyArrays && keyContainsArrays(key)) {\n        deepAssign($scope.model, key, newVal)\n      } else {\n        const setter = $parse($scope.options.key).assign\n        if (setter) {\n          setter($scope.model, newVal)\n        }\n      }\n    }\n\n    function parseGet(key, model) {\n      // If either of these are null/undefined then just return undefined\n      if ((!key && key !== 0) || !model) {\n        return undefined\n      }\n\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        return model[key]\n      } else {\n        return $parse(key)(model)\n      }\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        originalModel: options.model,\n        extras: {},\n        data: {},\n        templateOptions: {},\n        validation: {},\n      })\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions\n      $scope.formOptions = $scope.formOptions || {}\n    }\n\n    function setFieldIdAndName() {\n      if (angular.isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope)\n      } else {\n        const formName = ($scope.form && $scope.form.$name) || $scope.formId\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index)\n      }\n      $scope.options.id = $scope.id\n      $scope.name = $scope.options.name || $scope.options.id\n      $scope.options.name = $scope.name\n    }\n\n    function setDefaultValue() {\n      if (angular.isDefined($scope.options.defaultValue) &&\n          !angular.isDefined(parseGet($scope.options.key, $scope.model))) {\n        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue)\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model)\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions)\n      }\n      const properOrder = arrayify(options.optionsTypes).reverse() // so the right things are overridden\n      angular.forEach(properOrder, typeName => {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions)\n      })\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (angular.isFunction(extraOptions)) {\n          extraOptions = extraOptions(options, $scope)\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions)\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      const key = options.key || index || 0\n      angular.extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key,\n        value: options.value || valueGetterSetter,\n        runExpressions,\n        resetModel,\n        updateInitialValue,\n      })\n    }\n\n    function resetModel() {\n      parseSet($scope.options.key, $scope.model, $scope.options.initialValue)\n      if ($scope.options.formControl) {\n        if (angular.isArray($scope.options.formControl)) {\n          angular.forEach($scope.options.formControl, function(formControl) {\n            resetFormControl(formControl, true)\n          })\n        } else {\n          resetFormControl($scope.options.formControl)\n        }\n      }\n      if ($scope.form) {\n        $scope.form.$setUntouched && $scope.form.$setUntouched()\n        $scope.form.$setPristine()\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel) {\n      if (!isMultiNgModel) {\n        formControl.$setViewValue(parseGet($scope.options.key, $scope.model))\n      }\n\n      formControl.$render()\n      formControl.$setUntouched && formControl.$setUntouched()\n      formControl.$setPristine()\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if (!$scope.$root.$$phase) {\n        $scope.$digest()\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = parseGet($scope.options.key, $scope.model)\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {}\n      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue)\n          }\n        }\n      })\n    }\n\n    function invokeControllers(scope, options = {}, type = {}) {\n      angular.forEach([type.controller, options.controller], controller => {\n        if (controller) {\n          $controller(controller, {$scope: scope})\n        }\n      })\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {}\n      $scope.options.options.formState = $scope.formState\n      $scope.to = $scope.options.templateOptions\n    }\n  }\n\n\n  // link function\n  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate()\n      return\n    }\n\n    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n    if (!formlyFormCtrl && scope.options.model) {\n      scope.$watch('options.model', () => scope.options.runExpressions(), true)\n    }\n\n    addAttributes()\n    addClasses()\n\n    const type = getFieldType(scope.options)\n    const args = arguments\n    const thusly = this\n    let fieldCount = 0\n    const fieldManipulators = getManipulators(scope.options, scope.formOptions)\n    getFieldTemplate(scope.options)\n      .then(runManipulators(fieldManipulators.preWrapper))\n      .then(transcludeInWrappers(scope.options, scope.formOptions))\n      .then(runManipulators(fieldManipulators.postWrapper))\n      .then(setElementTemplate)\n      .then(watchFormControl)\n      .then(callLinkFunctions)\n      .catch(error => {\n        formlyWarn(\n          'there-was-a-problem-setting-the-template-for-this-field',\n          'There was a problem setting the template for this field ',\n          scope.options,\n          error\n        )\n      })\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options)\n      el.addClass('formly-field-group')\n      let extraAttributes = ''\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(key => {\n          return `${key}=\"${scope.options.elementAttributes[key]}\"`\n        }).join(' ')\n      }\n      let modelValue = 'model'\n      scope.options.form = scope.form\n      if (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`\n      }\n      getTemplate(`\n          <formly-form model=\"${modelValue}\"\n                       fields=\"options.fieldGroup\"\n                       options=\"options.options\"\n                       form=\"options.form\"\n                       class=\"${scope.options.className}\"\n                       ${extraAttributes}\n                       is-field-group>\n          </formly-form>\n        `)\n        .then(transcludeInWrappers(scope.options, scope.formOptions))\n        .then(setElementTemplate)\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes)\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className)\n      }\n      if (scope.options.type) {\n        el.addClass(`formly-field-${scope.options.type}`)\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString))\n      $compile(el.contents())(scope)\n      return templateString\n    }\n\n    function watchFormControl(templateString) {\n      let stopWatchingShowError = angular.noop\n      if (scope.options.noFormControl) {\n        return\n      }\n      const templateEl = angular.element(`<div>${templateString}</div>`)\n      const ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]')\n\n\n      if (ngModelNodes.length) {\n        angular.forEach(ngModelNodes, function(ngModelNode) {\n          fieldCount++\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'))\n        })\n      }\n\n      function watchFieldNameOrExistence(name) {\n        const nameExpressionRegex = /\\{\\{(.*?)}}/\n        const nameExpression = nameExpressionRegex.exec(name)\n        if (nameExpression) {\n          name = $interpolate(name)(scope)\n        }\n        watchFieldExistence(name)\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch(`form[\"${name}\"]`, function formControlChange(formControl) {\n          if (formControl) {\n            if (fieldCount > 1) {\n              if (!scope.options.formControl) {\n                scope.options.formControl = []\n              }\n              scope.options.formControl.push(formControl)\n            } else {\n              scope.options.formControl = formControl\n            }\n            scope.fc = scope.options.formControl // shortcut for template authors\n            stopWatchingShowError()\n            addShowMessagesWatcher()\n            addParsers()\n            addFormatters()\n          }\n        })\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          const customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression\n          const options = scope.options\n          const formControls = arrayify(scope.fc)\n          if (!formControls.some(fc => fc.$invalid)) {\n            return false\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show\n          } else if (customExpression) {\n            return formControls.some(fc =>\n              formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue))\n          } else {\n            return formControls.some(fc => {\n              const noTouchedButDirty = (angular.isUndefined(fc.$touched) && fc.$dirty)\n              return (fc.$touched || noTouchedButDirty)\n            })\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show\n          scope.showError = show // shortcut for template authors\n        })\n      }\n\n      function addParsers() {\n        setParsersOrFormatters('parsers')\n      }\n\n      function addFormatters() {\n        setParsersOrFormatters('formatters')\n        const ctrl = scope.fc\n        const formWasPristine = scope.form.$pristine\n        if (scope.options.formatters) {\n          let value = ctrl.$modelValue\n          ctrl.$formatters.forEach((formatter) => {\n            value = formatter(value)\n          })\n\n          ctrl.$setViewValue(value)\n          ctrl.$render()\n          ctrl.$setPristine()\n          if (formWasPristine) {\n            scope.form.$setPristine()\n          }\n        }\n      }\n\n      function setParsersOrFormatters(which) {\n        let originalThingProp = 'originalParser'\n        if (which === 'formatters') {\n          originalThingProp = 'originalFormatter'\n        }\n\n        // init with type's parsers\n        let things = getThingsFromType(type)\n\n        // get optionsTypes things\n        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes))\n\n        // get field's things\n        things = formlyUtil.extendArray(things, scope.options[which])\n\n        // convert things into formlyExpression things\n        angular.forEach(things, (thing, index) => {\n          things[index] = getFormlyExpressionThing(thing)\n        })\n\n        let ngModelCtrls = scope.fc\n        if (!angular.isArray(ngModelCtrls)) {\n          ngModelCtrls = [ngModelCtrls]\n        }\n\n        angular.forEach(ngModelCtrls, ngModelCtrl => {\n          ngModelCtrl['$' + which] = ngModelCtrl['$' + which].concat(...things)\n        })\n\n        function getThingsFromType(theType) {\n          if (!theType) {\n            return []\n          }\n          if (angular.isString(theType)) {\n            theType = formlyConfig.getType(theType, true, scope.options)\n          }\n          let typeThings = []\n\n          // get things from parent\n          if (theType.extends) {\n            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType.extends))\n          }\n\n          // get own type's things\n          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []))\n\n          // get things from optionsTypes\n          typeThings = formlyUtil.extendArray(\n            typeThings,\n            getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType))\n          )\n\n          return typeThings\n        }\n\n        function getThingsFromOptionsTypes(optionsTypes = []) {\n          let optionsTypesThings = []\n          angular.forEach(angular.copy(arrayify(optionsTypes)).reverse(), optionsTypeName => {\n            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName))\n          })\n          return optionsTypesThings\n        }\n\n        function getFormlyExpressionThing(thing) {\n          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing\n          return formlyExpressionParserOrFormatterFunction\n\n          function formlyExpressionParserOrFormatterFunction($viewValue) {\n            const $modelValue = scope.options.value()\n            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue)\n          }\n        }\n\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args)\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args)\n      }\n    }\n\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        let chain = $q.when(templateToManipulate)\n        angular.forEach(manipulators, manipulator => {\n          chain = chain.then(template => {\n            return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate)\n            })\n          })\n        })\n        return chain\n      }\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    const wrapper = angular.element('<a></a>')\n    return wrapper.append(el).html()\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type)\n  }\n\n  function getManipulators(options, formOptions) {\n    let preWrapper = []\n    let postWrapper = []\n    addManipulators(options.templateManipulators)\n    addManipulators(formOptions.templateManipulators)\n    addManipulators(formlyConfig.templateManipulators)\n    return {preWrapper, postWrapper}\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n      const {preWrapper:pre = [], postWrapper:post = []} = (manipulators || {});\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType) {\n      if (angular.isDefined(options[key])) {\n        return options[key]\n      } else if (fieldType && angular.isDefined(fieldType[key])) {\n        return fieldType[key]\n      }\n    }\n\n    const type = formlyConfig.getType(options.type, true, options)\n    const template = fromOptionsOrType('template', type)\n    const templateUrl = fromOptionsOrType('templateUrl', type)\n    if (angular.isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError(\n        'type-type-has-no-template',\n        `Type '${options.type}' has no template. On element:`, options\n      )\n    }\n\n    return getTemplate(templateUrl || template, angular.isUndefined(template), options)\n  }\n\n\n  function getTemplate(template, isUrl, options) {\n    let templatePromise\n    if (angular.isFunction(template)) {\n      templatePromise = $q.when(template(options))\n    } else {\n      templatePromise = $q.when(template)\n    }\n\n    if (!isUrl) {\n      return templatePromise\n    } else {\n      const httpOptions = {cache: $templateCache}\n      return templatePromise\n        .then((url) => $http.get(url, httpOptions))\n        .then((response) => response.data)\n        .catch(function handleErrorGettingATemplate(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          )\n        })\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    const wrapper = getWrapperOption(options, formOptions)\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template)\n      }\n\n      wrapper.forEach((aWrapper) => {\n        formlyUsability.checkWrapper(aWrapper, options)\n        runApiCheck(aWrapper, options)\n      })\n      const promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template))\n      return $q.all(promises).then(wrappersTemplates => {\n        wrappersTemplates.forEach((wrapperTemplate, index) => {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index])\n        })\n        wrappersTemplates.reverse() // wrapper 0 is wrapped in wrapper 1 and so on...\n        let totalWrapper = wrappersTemplates.shift()\n        wrappersTemplates.forEach(wrapperTemplate => {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate)\n        })\n        return doTransclusion(totalWrapper, template)\n      })\n    }\n  }\n\n  function doTransclusion(wrapper, template) {\n    const superWrapper = angular.element('<a></a>') // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper)\n    let transcludeEl = superWrapper.find('formly-transclude')\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude')\n    }\n    transcludeEl.replaceWith(template)\n    return superWrapper.html()\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[2, 6] */\n    let wrapper = options.wrapper\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return []\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type))\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper)\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    const type = formlyConfig.getType(options.type, true, options)\n    if (type && type.wrapper) {\n      const typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper)\n      wrapper = wrapper.concat(typeWrappers)\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      const formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper)\n      wrapper = wrapper.concat(formWrappers)\n    }\n\n    // add the default wrapper last\n    const defaultWrapper = formlyConfig.getWrapper()\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper)\n    }\n    return wrapper\n  }\n\n  function checkApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed',\n    })\n    // validate with the type\n    const type = options.type && formlyConfig.getType(options.type)\n    if (type) {\n      runApiCheck(type, options, true)\n    }\n    if (options.expressionProperties && options.expressionProperties.hide) {\n      formlyWarn(\n        'dont-use-expressionproperties.hide-use-hideexpression-instead',\n        'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead',\n        options\n      )\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed',\n    })\n  }\n\n  function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options, forType) {\n    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options)\n    if (forType && options.type) {\n      angular.forEach(formlyConfig.getTypeHeritage(options.type), function(type) {\n        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options)\n      })\n    }\n  }\n\n  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n    /* eslint complexity:[2, 9] */\n    if (!apiCheck) {\n      return\n    }\n    const instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck\n    if (instance.config.disabled || apiCheckFactory.globalConfig.disabled) {\n      return\n    }\n    const fn = apiCheckFunction || 'warn'\n    // this is the new API\n    const checkerObjects = apiCheck(instance)\n    angular.forEach(checkerObjects, (shape, name) => {\n      const checker = instance.shape(shape)\n      const checkOptions = angular.extend({\n        prefix: `formly-field type ${options.type} for property ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed',\n      }, apiCheckOptions)\n      instance[fn](checker, options[name], checkOptions)\n    })\n  }\n\n\n}\n\n\n// Stateless util functions\nfunction getDefaultOptionsOptionsTypes(type) {\n  return getDefaultOptionsProperty(type, 'optionsTypes', [])\n}\n\nfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n  return type.defaultOptions && type.defaultOptions[prop] || defaultValue\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-field.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = formlyFocus;\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      var previousEl = null;\n      var el = element[0];\n      var doc = $document[0];\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement;\n            el.focus();\n          }, ~ ~attrs.focusWait);\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur();\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus();\n            }\n          }\n        }\n      });\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./directives/formly-focus.js","export default formlyFocus\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      let previousEl = null\n      const el = element[0]\n      const doc = $document[0]\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement\n            el.focus()\n          }, ~~attrs.focusWait)\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur()\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus()\n            }\n          }\n        }\n      })\n    },\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-focus.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slice = Array.prototype.slice;\nexports['default'] = FormlyFormController;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nfunction isFieldGroup(field) {\n  return field && !!field.fieldGroup;\n}\n\n// @ngInject\n\nfunction FormlyFormController(formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\n  setupOptions();\n  $scope.model = $scope.model || {};\n  setupFields();\n\n  // watch the model and evaluate watch expressions that depend on it.\n  if (!$scope.options.manualModelWatcher) {\n    $scope.$watch('model', onModelOrFormStateChange, true);\n  } else if (_angularFix2['default'].isFunction($scope.options.manualModelWatcher)) {\n    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true);\n  }\n\n  if ($scope.options.formState) {\n    $scope.$watch('options.formState', onModelOrFormStateChange, true);\n  }\n\n  function onModelOrFormStateChange() {\n    _angularFix2['default'].forEach($scope.fields, runFieldExpressionProperties);\n  }\n\n  function validateFormControl(formControl, promise) {\n    var validate = formControl.$validate;\n    if (promise) {\n      promise.then(function () {\n        return validate.apply(formControl);\n      });\n    } else {\n      validate();\n    }\n  }\n\n  function runFieldExpressionProperties(field, index) {\n    var model = field.model || $scope.model;\n    var promise = field.runExpressions && field.runExpressions();\n    if (field.hideExpression) {\n      // can't use hide with expressionProperties reliably\n      var val = model[field.key];\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (_angularFix2['default'].isArray(field.formControl)) {\n        _angularFix2['default'].forEach(field.formControl, function (formControl) {\n          validateFormControl(formControl, promise);\n        });\n      } else {\n        validateFormControl(field.formControl, promise);\n      }\n    }\n  }\n\n  function setupFields() {\n    $scope.fields = $scope.fields || [];\n\n    checkDeprecatedOptions($scope.options);\n\n    var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\n    if (!_angularFix2['default'].isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms];\n    }\n\n    _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n      if (fieldTransform) {\n        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n        if (!$scope.fields) {\n          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    setupModels();\n\n    if ($scope.options.watchAllExpressions) {\n      _angularFix2['default'].forEach($scope.fields, setupHideExpressionWatcher);\n    }\n\n    _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n    _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n  }\n\n  function checkDeprecatedOptions(options) {\n    if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n    } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n    }\n  }\n\n  function setupOptions() {\n    formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n    $scope.options = $scope.options || {};\n    $scope.options.formState = $scope.options.formState || {};\n\n    _angularFix2['default'].extend($scope.options, {\n      updateInitialValue: updateInitialValue,\n      resetModel: resetModel\n    });\n  }\n\n  function updateInitialValue() {\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      if (isFieldGroup(field) && field.options) {\n        field.options.updateInitialValue();\n      } else {\n        field.updateInitialValue();\n      }\n    });\n  }\n\n  function resetModel() {\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      if (isFieldGroup(field) && field.options) {\n        field.options.resetModel();\n      } else if (field.resetModel) {\n        field.resetModel();\n      }\n    });\n  }\n\n  function setupModels() {\n    // a set of field models that are already watched (the $scope.model will have its own watcher)\n    var watchedModels = [$scope.model];\n    // we will not set up automatic model watchers if manual mode is set\n    var manualModelWatcher = $scope.options.manualModelWatcher;\n\n    if ($scope.options.formState) {\n      // $scope.options.formState will have its own watcher\n      watchedModels.push($scope.options.formState);\n    }\n\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      var isNewModel = initModel(field);\n\n      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n        $scope.$watch(function () {\n          return field.model;\n        }, onModelOrFormStateChange, true);\n        watchedModels.push(field.model);\n      }\n    });\n  }\n\n  function setupHideExpressionWatcher(field, index) {\n    if (field.hideExpression) {\n      (function () {\n        // can't use hide with expressionProperties reliably\n        var model = field.model || $scope.model;\n        $scope.$watch(function hideExpressionWatcher() {\n          var val = model[field.key];\n          return evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n        }, function (hide) {\n          return field.hide = hide;\n        }, true);\n      })();\n    }\n  }\n\n  function initModel(field) {\n    var isNewModel = true;\n\n    if (_angularFix2['default'].isString(field.model)) {\n      (function () {\n        var expression = field.model;\n\n        isNewModel = !referencesCurrentlyWatchedModel(expression);\n\n        field.model = resolveStringModel(expression);\n\n        $scope.$watch(function () {\n          return resolveStringModel(expression);\n        }, function (model) {\n          return field.model = model;\n        });\n      })();\n    }\n\n    return isNewModel;\n\n    function resolveStringModel(expression) {\n      var index = $scope.fields.indexOf(field);\n      var model = evalCloseToFormlyExpression(expression, undefined, field, index, { model: $scope.model });\n\n      if (!model) {\n        throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n      }\n\n      return model;\n    }\n  }\n\n  function referencesCurrentlyWatchedModel(expression) {\n    return ['model', 'formState'].some(function (item) {\n      return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n    });\n  }\n\n  function attachKey(field, index) {\n    if (!isFieldGroup(field)) {\n      field.key = field.key || index || 0;\n    }\n  }\n\n  function setupWatchers(field, index) {\n    if (!_angularFix2['default'].isDefined(field.watcher)) {\n      return;\n    }\n    var watchers = field.watcher;\n    if (!_angularFix2['default'].isArray(watchers)) {\n      watchers = [watchers];\n    }\n    _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n      if (!_angularFix2['default'].isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n        throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n      }\n      var watchExpression = getWatchExpression(watcher, field, index);\n      var watchListener = getWatchListener(watcher, field, index);\n\n      var type = watcher.type || '$watch';\n      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n    });\n  }\n\n  function getWatchExpression(watcher, field, index) {\n    var watchExpression = undefined;\n    if (!_angularFix2['default'].isUndefined(watcher.expression)) {\n      watchExpression = watcher.expression;\n    } else if (field.key) {\n      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']';\n    }\n    if (_angularFix2['default'].isFunction(watchExpression)) {\n      (function () {\n        // wrap the field's watch expression so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalExpression = watchExpression;\n        watchExpression = function formlyWatchExpression() {\n          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n          return originalExpression.apply(undefined, _toConsumableArray(args));\n        };\n        watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n      })();\n    } else if (field.model) {\n      watchExpression = $parse(watchExpression).bind(null, $scope, { model: field.model });\n    }\n    return watchExpression;\n  }\n\n  function getWatchListener(watcher, field, index) {\n    var watchListener = watcher.listener;\n    if (_angularFix2['default'].isFunction(watchListener) || watcher.runFieldExpressions) {\n      (function () {\n        // wrap the field's watch listener so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalListener = watchListener;\n        watchListener = function formlyWatchListener() {\n          var value = undefined;\n          if (originalListener) {\n            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n            value = originalListener.apply(undefined, _toConsumableArray(args));\n          }\n          if (watcher.runFieldExpressions) {\n            runFieldExpressionProperties(field, index);\n          }\n          return value;\n        };\n        watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n      })();\n    }\n    return watchListener;\n  }\n\n  function modifyArgs(watcher, index) {\n    for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      originalArgs[_key - 2] = arguments[_key];\n    }\n\n    return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n  }\n\n  function evalCloseToFormlyExpression(expression, val, field, index) {\n    var extraLocals = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\n    extraLocals = _angularFix2['default'].extend(getFormlyFieldLikeLocals(field, index), extraLocals);\n    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n  }\n\n  function getFormlyFieldLikeLocals(field, index) {\n    // this makes it closer to what a regular formlyExpression would be\n    return {\n      model: field.model,\n      options: field,\n      index: index,\n      formState: $scope.options.formState,\n      originalModel: $scope.model,\n      formOptions: $scope.options,\n      formId: $scope.formId\n    };\n  }\n}\n\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./directives/formly-form.controller.js","import angular from 'angular-fix'\n\nfunction isFieldGroup(field) {\n  return field && !!field.fieldGroup\n}\n\n// @ngInject\nexport default function FormlyFormController(\n  formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\n  setupOptions()\n  $scope.model = $scope.model || {}\n  setupFields()\n\n  // watch the model and evaluate watch expressions that depend on it.\n  if (!$scope.options.manualModelWatcher) {\n    $scope.$watch('model', onModelOrFormStateChange, true)\n  } else if (angular.isFunction($scope.options.manualModelWatcher)) {\n    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true)\n  }\n\n  if ($scope.options.formState) {\n    $scope.$watch('options.formState', onModelOrFormStateChange, true)\n  }\n\n  function onModelOrFormStateChange() {\n    angular.forEach($scope.fields, runFieldExpressionProperties)\n  }\n\n  function validateFormControl(formControl, promise) {\n    const validate = formControl.$validate\n    if (promise) {\n      promise.then(() => validate.apply(formControl))\n    } else {\n      validate()\n    }\n  }\n\n  function runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const val = model[field.key]\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (angular.isArray(field.formControl)) {\n        angular.forEach(field.formControl, function(formControl) {\n          validateFormControl(formControl, promise)\n        })\n      } else {\n        validateFormControl(field.formControl, promise)\n      }\n    }\n  }\n\n  function setupFields() {\n    $scope.fields = $scope.fields || []\n\n    checkDeprecatedOptions($scope.options)\n\n    let fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform\n\n    if (!angular.isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms]\n    }\n\n    angular.forEach(fieldTransforms, function transformFields(fieldTransform) {\n      if (fieldTransform) {\n        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form)\n        if (!$scope.fields) {\n          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields')\n        }\n      }\n    })\n\n    setupModels()\n\n    if ($scope.options.watchAllExpressions) {\n      angular.forEach($scope.fields, setupHideExpressionWatcher)\n    }\n\n    angular.forEach($scope.fields, attachKey) // attaches a key based on the index if a key isn't specified\n    angular.forEach($scope.fields, setupWatchers) // setup watchers for all fields\n  }\n\n  function checkDeprecatedOptions(options) {\n    if (formlyConfig.extras.fieldTransform && angular.isFunction(formlyConfig.extras.fieldTransform)) {\n      formlyWarn(\n        'fieldtransform-as-a-function-deprecated',\n        'fieldTransform as a function has been deprecated.',\n        `Attempted for formlyConfig.extras: ${formlyConfig.extras.fieldTransform.name}`,\n        formlyConfig.extras\n      )\n    } else if (options.fieldTransform && angular.isFunction(options.fieldTransform)) {\n      formlyWarn(\n        'fieldtransform-as-a-function-deprecated',\n        'fieldTransform as a function has been deprecated.',\n        `Attempted for form`,\n        options\n      )\n    }\n  }\n\n  function setupOptions() {\n    formlyApiCheck.throw(\n      [formlyApiCheck.formOptionsApi.optional], [$scope.options], {prefix: 'formly-form options check'}\n    )\n    $scope.options = $scope.options || {}\n    $scope.options.formState = $scope.options.formState || {}\n\n    angular.extend($scope.options, {\n      updateInitialValue,\n      resetModel,\n    })\n\n  }\n\n  function updateInitialValue() {\n    angular.forEach($scope.fields, field => {\n      if (isFieldGroup(field) && field.options) {\n        field.options.updateInitialValue()\n      } else {\n        field.updateInitialValue()\n      }\n    })\n  }\n\n  function resetModel() {\n    angular.forEach($scope.fields, field => {\n      if (isFieldGroup(field) && field.options) {\n        field.options.resetModel()\n      } else if (field.resetModel) {\n        field.resetModel()\n      }\n    })\n  }\n\n  function setupModels() {\n    // a set of field models that are already watched (the $scope.model will have its own watcher)\n    const watchedModels = [$scope.model]\n    // we will not set up automatic model watchers if manual mode is set\n    const manualModelWatcher = $scope.options.manualModelWatcher\n\n    if ($scope.options.formState) {\n      // $scope.options.formState will have its own watcher\n      watchedModels.push($scope.options.formState)\n    }\n\n    angular.forEach($scope.fields, (field) => {\n      const isNewModel = initModel(field)\n\n      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n        $scope.$watch(() => field.model, onModelOrFormStateChange, true)\n        watchedModels.push(field.model)\n      }\n    })\n  }\n\n  function setupHideExpressionWatcher(field, index) {\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const model = field.model || $scope.model\n      $scope.$watch(function hideExpressionWatcher() {\n        const val = model[field.key]\n        return evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n      }, (hide) => field.hide = hide, true)\n    }\n  }\n\n  function initModel(field) {\n    let isNewModel = true\n\n    if (angular.isString(field.model)) {\n      const expression = field.model\n\n      isNewModel = !referencesCurrentlyWatchedModel(expression)\n\n      field.model = resolveStringModel(expression)\n\n      $scope.$watch(() => resolveStringModel(expression), (model) => field.model = model)\n    }\n\n    return isNewModel\n\n    function resolveStringModel(expression) {\n      const index = $scope.fields.indexOf(field)\n      const model = evalCloseToFormlyExpression(expression, undefined, field, index, {model: $scope.model})\n\n      if (!model) {\n        throw formlyUsability.getFieldError(\n          'field-model-must-be-initialized',\n          'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n            ' expression must have been initialized ahead of time.',\n          field)\n      }\n\n      return model\n    }\n  }\n\n  function referencesCurrentlyWatchedModel(expression) {\n    return ['model', 'formState'].some(item => {\n      return formlyUtil.startsWith(expression, `${item}.`) || formlyUtil.startsWith(expression, `${item}[`)\n    })\n  }\n\n  function attachKey(field, index) {\n    if (!isFieldGroup(field)) {\n      field.key = field.key || index || 0\n    }\n  }\n\n  function setupWatchers(field, index) {\n    if (!angular.isDefined(field.watcher)) {\n      return\n    }\n    let watchers = field.watcher\n    if (!angular.isArray(watchers)) {\n      watchers = [watchers]\n    }\n    angular.forEach(watchers, function setupWatcher(watcher) {\n      if (!angular.isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n        throw formlyUsability.getFieldError(\n          'all-field-watchers-must-have-a-listener',\n          'All field watchers must have a listener', field\n        )\n      }\n      const watchExpression = getWatchExpression(watcher, field, index)\n      const watchListener = getWatchListener(watcher, field, index)\n\n      const type = watcher.type || '$watch'\n      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep)\n    })\n  }\n\n  function getWatchExpression(watcher, field, index) {\n    let watchExpression\n    if (!angular.isUndefined(watcher.expression)) {\n      watchExpression = watcher.expression\n    } else if (field.key) {\n      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']'\n    }\n    if (angular.isFunction(watchExpression)) {\n      // wrap the field's watch expression so we can call it with the field as the first arg\n      // and the stop function as the last arg as a helper\n      const originalExpression = watchExpression\n      watchExpression = function formlyWatchExpression() {\n        const args = modifyArgs(watcher, index, ...arguments)\n        return originalExpression(...args)\n      }\n      watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`\n    } else if (field.model) {\n      watchExpression = $parse(watchExpression).bind(null, $scope, {model: field.model})\n    }\n    return watchExpression\n  }\n\n  function getWatchListener(watcher, field, index) {\n    let watchListener = watcher.listener\n    if (angular.isFunction(watchListener) || watcher.runFieldExpressions) {\n      // wrap the field's watch listener so we can call it with the field as the first arg\n      // and the stop function as the last arg as a helper\n      const originalListener = watchListener\n      watchListener = function formlyWatchListener() {\n        let value\n        if (originalListener) {\n          const args = modifyArgs(watcher, index, ...arguments)\n          value = originalListener(...args)\n        }\n        if (watcher.runFieldExpressions) {\n          runFieldExpressionProperties(field, index)\n        }\n        return value\n      }\n      watchListener.displayName = `Formly Watch Listener for field for ${field.key}`\n    }\n    return watchListener\n  }\n\n  function modifyArgs(watcher, index, ...originalArgs) {\n    return [$scope.fields[index], ...originalArgs, watcher.stopWatching]\n  }\n\n  function evalCloseToFormlyExpression(expression, val, field, index, extraLocals = {}) {\n    extraLocals = angular.extend(getFormlyFieldLikeLocals(field, index), extraLocals)\n    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals)\n  }\n\n  function getFormlyFieldLikeLocals(field, index) {\n    // this makes it closer to what a regular formlyExpression would be\n    return {\n      model: field.model,\n      options: field,\n      index,\n      formState: $scope.options.formState,\n      originalModel: $scope.model,\n      formOptions: $scope.options,\n      formId: $scope.formId,\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-form.controller.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyForm;\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict AE\n */\n// @ngInject\nfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n  var currentFormId = 1;\n  return {\n    restrict: 'AE',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?'\n    },\n    controller: 'FormlyFormController',\n    link: formlyFormLink\n  };\n\n  function formlyFormGetTemplate(el, attrs) {\n    var rootEl = getRootEl();\n    var fieldRootEl = getFieldRootEl();\n    var formId = 'formly_' + currentFormId++;\n    var parentFormAttributes = '';\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n    }\n    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form';\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div';\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return '';\n      } else {\n        return 'track by ' + attrs.trackBy;\n      }\n    }\n\n    function getFormName() {\n      var formName = formId;\n      var bindName = attrs.bindName;\n      if (bindName) {\n        if (_angularFix2['default'].version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n      }\n      return formName;\n    }\n\n    function getTranscludeClass() {\n      return attrs.transcludeClass || '';\n    }\n\n    function copyAttributes(attributes) {\n      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n      var arrayAttrs = [];\n      _angularFix2['default'].forEach(attributes, function (_ref) {\n        var nodeName = _ref.nodeName;\n        var value = _ref.value;\n\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n        }\n      });\n      return arrayAttrs.join(' ');\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController();\n    fixChromeAutocomplete();\n\n    function setFormController() {\n      var formId = attrs.name;\n      scope.formId = formId;\n      scope.theFormlyForm = scope[formId];\n      if (attrs.form) {\n        var getter = $parse(attrs.form);\n        var setter = getter.assign;\n        var parentForm = getter(scope.$parent);\n        if (parentForm) {\n          scope.theFormlyForm = parentForm;\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId]);\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController');\n        } else {\n          setter(scope.$parent, scope[formId]);\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n      }\n    }\n\n    /*\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n      if (global && !offInstance || onInstance) {\n        var input = document.createElement('input');\n        input.setAttribute('autocomplete', 'address-level4');\n        input.setAttribute('hidden', 'true');\n        el[0].appendChild(input);\n      }\n    }\n  }\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, function ($1) {\n        return '-' + $1.toLowerCase();\n      });\n    } else {\n      return '';\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./directives/formly-form.js","import angular from 'angular-fix'\n\nexport default formlyForm\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict AE\n */\n// @ngInject\nfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n  let currentFormId = 1\n  return {\n    restrict: 'AE',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?',\n    },\n    controller: 'FormlyFormController',\n    link: formlyFormLink,\n  }\n\n  function formlyFormGetTemplate(el, attrs) {\n    const rootEl = getRootEl()\n    const fieldRootEl = getFieldRootEl()\n    const formId = `formly_${currentFormId++}`\n    let parentFormAttributes = ''\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes)\n    }\n    return `\n        <${rootEl} class=\"formly\"\n                 name=\"${getFormName()}\"\n                 role=\"form\" ${parentFormAttributes}>\n          <${fieldRootEl} formly-field\n               ng-repeat=\"field in fields ${getTrackBy()}\"\n               ${getHideDirective()}=\"!field.hide\"\n               class=\"formly-field\"\n               options=\"field\"\n               model=\"field.model || model\"\n               original-model=\"model\"\n               fields=\"fields\"\n               form=\"theFormlyForm\"\n               form-id=\"${getFormName()}\"\n               form-state=\"options.formState\"\n               form-options=\"options\"\n               index=\"$index\">\n          </${fieldRootEl}>\n          <div ng-transclude class=\"${getTranscludeClass()}\"></div>\n        </${rootEl}>\n      `\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form'\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div'\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if'\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return ''\n      } else {\n        return `track by ${attrs.trackBy}`\n      }\n    }\n\n    function getFormName() {\n      let formName = formId\n      const bindName = attrs.bindName\n      if (bindName) {\n        if (angular.version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3')\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = `${$interpolate.startSymbol()}::'formly_' + ${bindName}${$interpolate.endSymbol()}`\n      }\n      return formName\n    }\n\n    function getTranscludeClass() {\n      return attrs.transcludeClass || ''\n    }\n\n    function copyAttributes(attributes) {\n      const excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class',\n        'data-model', 'data-form', 'data-fields', 'data-options', 'data-name']\n      const arrayAttrs = []\n      angular.forEach(attributes, ({nodeName, value}) => {\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(`${toKebabCase(nodeName)}=\"${value}\"`)\n        }\n      })\n      return arrayAttrs.join(' ')\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController()\n    fixChromeAutocomplete()\n\n    function setFormController() {\n      const formId = attrs.name\n      scope.formId = formId\n      scope.theFormlyForm = scope[formId]\n      if (attrs.form) {\n        const getter = $parse(attrs.form)\n        const setter = getter.assign\n        const parentForm = getter(scope.$parent)\n        if (parentForm) {\n          scope.theFormlyForm = parentForm\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId])\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController')\n        } else {\n          setter(scope.$parent, scope[formId])\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        formlyWarn(\n          'formly-form-has-no-formcontroller',\n          'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work',\n          el,\n          scope\n        )\n      }\n    }\n\n    /*\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      const global = formlyConfig.extras.removeChromeAutoComplete === true\n      const offInstance = scope.options && scope.options.removeChromeAutoComplete === false\n      const onInstance = scope.options && scope.options.removeChromeAutoComplete === true\n      if ((global && !offInstance) || onInstance) {\n        const input = document.createElement('input')\n        input.setAttribute('autocomplete', 'address-level4')\n        input.setAttribute('hidden', 'true')\n        el[0].appendChild(input)\n      }\n\n    }\n  }\n\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase())\n    } else {\n      return ''\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-form.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _providersFormlyApiCheck = require('./providers/formlyApiCheck');\n\nvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\nvar _otherDocsBaseUrl = require('./other/docsBaseUrl');\n\nvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\nvar _providersFormlyUsability = require('./providers/formlyUsability');\n\nvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\nvar _providersFormlyConfig = require('./providers/formlyConfig');\n\nvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\nvar _providersFormlyValidationMessages = require('./providers/formlyValidationMessages');\n\nvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\nvar _servicesFormlyUtil = require('./services/formlyUtil');\n\nvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\nvar _servicesFormlyWarn = require('./services/formlyWarn');\n\nvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\nvar _directivesFormlyCustomValidation = require('./directives/formly-custom-validation');\n\nvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\nvar _directivesFormlyField = require('./directives/formly-field');\n\nvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\nvar _directivesFormlyFocus = require('./directives/formly-focus');\n\nvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\nvar _directivesFormlyForm = require('./directives/formly-form');\n\nvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\nvar _directivesFormlyFormController = require('./directives/formly-form.controller');\n\nvar _directivesFormlyFormController2 = _interopRequireDefault(_directivesFormlyFormController);\n\nvar _runFormlyNgModelAttrsManipulator = require('./run/formlyNgModelAttrsManipulator');\n\nvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\nvar _runFormlyCustomTags = require('./run/formlyCustomTags');\n\nvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\nvar ngModuleName = 'formly';\n\nexports['default'] = ngModuleName;\n\nvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\nngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\nngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\nngModule.constant('formlyVersion', VERSION); // <-- webpack variable\n\nngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\nngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\nngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\nngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\nngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\nngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\nngModule.directive('formlyField', _directivesFormlyField2['default']);\nngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\nngModule.directive('formlyForm', _directivesFormlyForm2['default']);\nngModule.controller('FormlyFormController', _directivesFormlyFormController2['default']);\n\nngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\nngModule.run(_runFormlyCustomTags2['default']);\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./index.common.js","import angular from 'angular-fix'\n\nimport formlyApiCheck from './providers/formlyApiCheck'\nimport formlyErrorAndWarningsUrlPrefix from './other/docsBaseUrl'\nimport formlyUsability from './providers/formlyUsability'\nimport formlyConfig from './providers/formlyConfig'\nimport formlyValidationMessages from './providers/formlyValidationMessages'\nimport formlyUtil from './services/formlyUtil'\nimport formlyWarn from './services/formlyWarn'\n\nimport formlyCustomValidation from './directives/formly-custom-validation'\nimport formlyField from './directives/formly-field'\nimport formlyFocus from './directives/formly-focus'\nimport formlyForm from './directives/formly-form'\nimport FormlyFormController from './directives/formly-form.controller'\n\nimport formlyNgModelAttrsManipulator from './run/formlyNgModelAttrsManipulator'\nimport formlyCustomTags from './run/formlyCustomTags'\n\nconst ngModuleName = 'formly'\n\nexport default ngModuleName\n\nconst ngModule = angular.module(ngModuleName, [])\n\nngModule.constant('formlyApiCheck', formlyApiCheck)\nngModule.constant('formlyErrorAndWarningsUrlPrefix', formlyErrorAndWarningsUrlPrefix)\nngModule.constant('formlyVersion', VERSION) // <-- webpack variable\n\nngModule.provider('formlyUsability', formlyUsability)\nngModule.provider('formlyConfig', formlyConfig)\n\nngModule.factory('formlyValidationMessages', formlyValidationMessages)\nngModule.factory('formlyUtil', formlyUtil)\nngModule.factory('formlyWarn', formlyWarn)\n\nngModule.directive('formlyCustomValidation', formlyCustomValidation)\nngModule.directive('formlyField', formlyField)\nngModule.directive('formlyFocus', formlyFocus)\nngModule.directive('formlyForm', formlyForm)\nngModule.controller('FormlyFormController', FormlyFormController)\n\nngModule.run(formlyNgModelAttrsManipulator)\nngModule.run(formlyCustomTags)\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./index.common.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _apiCheck = require('api-check');\n\nvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\nvar apiCheck = (0, _apiCheck2['default'])({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl')\n  }\n});\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!_angularFix2['default'].isArray(otherProps)) {\n    otherProps = [otherProps];\n  }\n  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    var propExists = obj && obj.hasOwnProperty(propName);\n    var otherPropsExist = otherProps.some(function (otherProp) {\n      return obj && obj.hasOwnProperty(otherProp);\n    });\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type);\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj);\n    }\n  }\n\n  shapeRequiredIfNotDefinition.type = type;\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n}\n\nvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\nvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\nvar apiCheckProperty = apiCheck.func;\n\nvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  'throw': apiCheck.func,\n  shape: apiCheck.func\n}));\n\nvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\nvar formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional\n}).strict;\n\nvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n  expression: formlyExpression,\n  message: formlyExpression.optional\n}).strict]));\n\nvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\nvar templateManipulators = apiCheck.shape({\n  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n}).strict.nullable;\n\nvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n  expression: formlyExpression,\n  message: formlyExpression.optional\n}).strict]));\n\nvar watcherChecker = apiCheck.typeOrArrayOf(apiCheck.shape({\n  expression: formlyExpression.optional,\n  listener: formlyExpression.optional,\n  runFieldExpressions: apiCheck.bool.optional\n}));\n\nvar fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  originalModel: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  name: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  extras: apiCheck.shape({\n    validateOnModelChange: apiCheck.bool.optional,\n    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n  }).strict.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional\n  }).optional,\n  watcher: watcherChecker.optional,\n  validators: validatorChecker.optional,\n  asyncValidators: validatorChecker.optional,\n  parsers: apiCheck.arrayOf(formlyExpression).optional,\n  formatters: apiCheck.arrayOf(formlyExpression).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n  validation: apiCheck.shape({\n    show: apiCheck.bool.nullable.optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n  }).optional,\n  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional\n};\n\nvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\nvar formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  parseKeyArrays: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n  watchAllExpressions: apiCheck.bool.optional,\n  wrapper: specifyWrapperType.optional,\n  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n  data: apiCheck.object.optional\n}).strict;\n\nvar fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  watcher: watcherChecker.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  data: apiCheck.object.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n}).strict;\n\nvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\ntypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\nvar formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n  'extends': apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional\n}).strict;\n\n_angularFix2['default'].extend(apiCheck, {\n  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n});\n\nexports['default'] = apiCheck;\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./providers/formlyApiCheck.js","import angular from 'angular-fix'\nimport apiCheckFactory from 'api-check'\n\nconst apiCheck = apiCheckFactory({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl'),\n  },\n})\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!angular.isArray(otherProps)) {\n    otherProps = [otherProps]\n  }\n  const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`\n\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    const propExists = obj && obj.hasOwnProperty(propName)\n    const otherPropsExist = otherProps.some(function(otherProp) {\n      return obj && obj.hasOwnProperty(otherProp)\n    })\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type)\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj)\n    }\n  }\n\n  shapeRequiredIfNotDefinition.type = type\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition)\n}\n\nconst formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func])\nconst specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable\n\nconst apiCheckProperty = apiCheck.func\n\nconst apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  throw: apiCheck.func,\n  shape: apiCheck.func,\n}))\n\nconst apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']))\n\nconst formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n}).strict\n\nconst expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression,\n  apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional,\n  }).strict,\n]))\n\nconst modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object])\n\nconst templateManipulators = apiCheck.shape({\n  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n}).strict.nullable\n\nconst validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression, apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional,\n  }).strict,\n]))\n\nconst watcherChecker = apiCheck.typeOrArrayOf(\n  apiCheck.shape({\n    expression: formlyExpression.optional,\n    listener: formlyExpression.optional,\n    runFieldExpressions: apiCheck.bool.optional,\n  })\n)\n\nconst fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(\n    ['type', 'templateUrl'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  templateUrl: apiCheck.shape.ifNot(\n    ['type', 'template'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  originalModel: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  name: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  extras: apiCheck.shape({\n    validateOnModelChange: apiCheck.bool.optional,\n    skipNgModelAttrsManipulator: apiCheck.oneOfType([\n      apiCheck.string, apiCheck.bool,\n    ]).optional,\n  }).strict.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([\n      apiCheck.objectOf(apiCheck.number), apiCheck.number,\n    ]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional,\n  }).optional,\n  watcher: watcherChecker.optional,\n  validators: validatorChecker.optional,\n  asyncValidators: validatorChecker.optional,\n  parsers: apiCheck.arrayOf(formlyExpression).optional,\n  formatters: apiCheck.arrayOf(formlyExpression).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.string, apiCheck.func, apiCheck.array,\n  ]).optional,\n  validation: apiCheck.shape({\n    show: apiCheck.bool.nullable.optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional,\n  }).optional,\n  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional,\n}\n\n\nconst formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict\n\nconst formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  parseKeyArrays: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n  watchAllExpressions: apiCheck.bool.optional,\n  wrapper: specifyWrapperType.optional,\n  fieldTransform: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.array,\n  ]).optional,\n  data: apiCheck.object.optional,\n}).strict\n\n\nconst fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  watcher: watcherChecker.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  data: apiCheck.object.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n}).strict\n\nconst typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape)\ntypeOptionsDefaultOptions.key = apiCheck.string.optional\n\nconst formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.string, apiCheck.array,\n  ]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions),\n  ]).optional,\n  extends: apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional,\n}).strict\n\nangular.extend(apiCheck, {\n  formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType, fieldGroup, formOptionsApi,\n})\n\nexport default apiCheck\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyApiCheck.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _otherUtils = require('../other/utils');\n\nvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\nexports['default'] = formlyConfig;\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n  var _this2 = this;\n\n  var typeMap = {};\n  var templateWrappersMap = {};\n  var defaultWrapperName = 'default';\n  var _this = this;\n  var getError = formlyUsabilityProvider.getFormlyError;\n\n  _angularFix2['default'].extend(this, {\n    setType: setType,\n    getType: getType,\n    getTypes: getTypes,\n    getTypeHeritage: getTypeHeritage,\n    setWrapper: setWrapper,\n    getWrapper: getWrapper,\n    getWrapperByType: getWrapperByType,\n    removeWrapperByName: removeWrapperByName,\n    removeWrappersForType: removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      fieldTransform: [],\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      parseKeyArrays: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: []\n    },\n    $get: function $get() {\n      return _this2;\n    }\n  });\n\n  function setType(options) {\n    if (_angularFix2['default'].isArray(options)) {\n      var _ret = (function () {\n        var allTypes = [];\n        _angularFix2['default'].forEach(options, function (item) {\n          allTypes.push(setType(item));\n        });\n        return {\n          v: allTypes\n        };\n      })();\n\n      if (typeof _ret === 'object') return _ret.v;\n    } else if (_angularFix2['default'].isObject(options)) {\n      checkType(options);\n      if (options['extends']) {\n        extendTypeOptions(options);\n      }\n      typeMap[options.name] = options;\n      return typeMap[options.name];\n    } else {\n      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed'\n    });\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types');\n    } else {\n      options.overwriteOk = undefined;\n    }\n  }\n\n  function extendTypeOptions(options) {\n    var extendsType = getType(options['extends'], true, options);\n    extendTypeControllerFunction(options, extendsType);\n    extendTypeLinkFunction(options, extendsType);\n    extendTypeDefaultOptions(options, extendsType);\n    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n    extendTemplate(options, extendsType);\n  }\n\n  function extendTemplate(options, extendsType) {\n    if (options.template && extendsType.templateUrl) {\n      delete options.templateUrl;\n    } else if (options.templateUrl && extendsType.template) {\n      delete options.template;\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    var extendsCtrl = extendsType.controller;\n    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n      return;\n    }\n    var optionsCtrl = options.controller;\n    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n      options.controller = function ($scope, $controller) {\n        $controller(extendsCtrl, { $scope: $scope });\n        $controller(optionsCtrl, { $scope: $scope });\n      };\n      options.controller.$inject = ['$scope', '$controller'];\n    } else {\n      options.controller = extendsCtrl;\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    var extendsFn = extendsType.link;\n    if (!_angularFix2['default'].isDefined(extendsFn)) {\n      return;\n    }\n    var optionsFn = options.link;\n    if (_angularFix2['default'].isDefined(optionsFn)) {\n      options.link = function () {\n        extendsFn.apply(undefined, arguments);\n        optionsFn.apply(undefined, arguments);\n      };\n    } else {\n      options.link = extendsFn;\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    var extendsDO = extendsType.defaultOptions;\n    if (!_angularFix2['default'].isDefined(extendsDO)) {\n      return;\n    }\n    var optionsDO = options.defaultOptions || {};\n    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        var extendsDefaultOptions = extendsDO(opts, scope);\n        var mergedDefaultOptions = {};\n        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n        var extenderOptionsDefaultOptions = optionsDO;\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n        }\n        _otherUtils2['default'].reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions);\n        return extenderOptionsDefaultOptions;\n      };\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        var newDefaultOptions = {};\n        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n        return optionsDO(newDefaultOptions, scope);\n      };\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined;\n    }\n    var type = typeMap[name];\n    if (!type && throwError === true) {\n      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n    } else {\n      return type;\n    }\n  }\n\n  function getTypes() {\n    return typeMap;\n  }\n\n  function getTypeHeritage(parent) {\n    var heritage = [];\n    var type = parent;\n    if (_angularFix2['default'].isString(type)) {\n      type = getType(parent);\n    }\n    parent = type['extends'];\n    while (parent) {\n      type = getType(parent);\n      heritage.push(type);\n      parent = type['extends'];\n    }\n    return heritage;\n  }\n\n  function setWrapper(_x, _x2) {\n    var _again = true;\n\n    _function: while (_again) {\n      var options = _x,\n          name = _x2;\n      _again = false;\n\n      if (_angularFix2['default'].isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (_angularFix2['default'].isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (_angularFix2['default'].isString(options)) {\n        _x = {\n          template: options,\n          name: name\n        };\n        _x2 = undefined;\n        _again = true;\n        continue _function;\n      }\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (_angularFix2['default'].isString(options.types)) {\n      return [options.types];\n    }\n    if (!_angularFix2['default'].isDefined(options.types)) {\n      return [];\n    } else {\n      return options.types;\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName;\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options);\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n    } else {\n      delete options.overwriteOk;\n    }\n    checkWrapperTypes(options);\n  }\n\n  function checkWrapperTypes(options) {\n    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n    if (shouldThrow) {\n      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName];\n  }\n\n  function getWrapperByType(type) {\n    /* eslint prefer-const:0 */\n    var wrappers = [];\n    for (var _name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(_name)) {\n        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[_name]);\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  function removeWrapperByName(name) {\n    var wrapper = templateWrappersMap[name];\n    delete templateWrappersMap[name];\n    return wrapper;\n  }\n\n  function removeWrappersForType(type) {\n    var wrappers = getWrapperByType(type);\n    if (!wrappers) {\n      return undefined;\n    }\n    if (!_angularFix2['default'].isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name);\n    } else {\n      wrappers.forEach(function (wrapper) {\n        return removeWrapperByName(wrapper.name);\n      });\n      return wrappers;\n    }\n  }\n\n  function warn() {\n    if (!_this.disableWarnings && console.warn) {\n      /* eslint no-console:0 */\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n      console.warn.apply(console, _toConsumableArray(args));\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./providers/formlyConfig.js","import angular from 'angular-fix'\nimport utils from '../other/utils'\n\nexport default formlyConfig\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\n  const typeMap = {}\n  const templateWrappersMap = {}\n  const defaultWrapperName = 'default'\n  const _this = this\n  const getError = formlyUsabilityProvider.getFormlyError\n\n  angular.extend(this, {\n    setType,\n    getType,\n    getTypes,\n    getTypeHeritage,\n    setWrapper,\n    getWrapper,\n    getWrapperByType,\n    removeWrapperByName,\n    removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      fieldTransform: [],\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      parseKeyArrays: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null,\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: [],\n    },\n    $get: () => this,\n  })\n\n  function setType(options) {\n    if (angular.isArray(options)) {\n      const allTypes = []\n      angular.forEach(options, item => {\n        allTypes.push(setType(item))\n      })\n      return allTypes\n    } else if (angular.isObject(options)) {\n      checkType(options)\n      if (options.extends) {\n        extendTypeOptions(options)\n      }\n      typeMap[options.name] = options\n      return typeMap[options.name]\n    } else {\n      throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`)\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed',\n    })\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types')\n    } else {\n      options.overwriteOk = undefined\n    }\n  }\n\n  function extendTypeOptions(options) {\n    const extendsType = getType(options.extends, true, options)\n    extendTypeControllerFunction(options, extendsType)\n    extendTypeLinkFunction(options, extendsType)\n    extendTypeDefaultOptions(options, extendsType)\n    utils.reverseDeepMerge(options, extendsType)\n    extendTemplate(options, extendsType)\n  }\n\n  function extendTemplate(options, extendsType) {\n    if (options.template && extendsType.templateUrl) {\n      delete options.templateUrl\n    } else if (options.templateUrl && extendsType.template) {\n      delete options.template\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    const extendsCtrl = extendsType.controller\n    if (!angular.isDefined(extendsCtrl)) {\n      return\n    }\n    const optionsCtrl = options.controller\n    if (angular.isDefined(optionsCtrl)) {\n      options.controller = function($scope, $controller) {\n        $controller(extendsCtrl, {$scope})\n        $controller(optionsCtrl, {$scope})\n      }\n      options.controller.$inject = ['$scope', '$controller']\n    } else {\n      options.controller = extendsCtrl\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    const extendsFn = extendsType.link\n    if (!angular.isDefined(extendsFn)) {\n      return\n    }\n    const optionsFn = options.link\n    if (angular.isDefined(optionsFn)) {\n      options.link = function() {\n        extendsFn(...arguments)\n        optionsFn(...arguments)\n      }\n    } else {\n      options.link = extendsFn\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    const extendsDO = extendsType.defaultOptions\n    if (!angular.isDefined(extendsDO)) {\n      return\n    }\n    const optionsDO = options.defaultOptions || {}\n    const optionsDOIsFn = angular.isFunction(optionsDO)\n    const extendsDOIsFn = angular.isFunction(extendsDO)\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        const extendsDefaultOptions = extendsDO(opts, scope)\n        const mergedDefaultOptions = {}\n        utils.reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions)\n        let extenderOptionsDefaultOptions = optionsDO\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope)\n        }\n        utils.reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions)\n        return extenderOptionsDefaultOptions\n      }\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        const newDefaultOptions = {}\n        utils.reverseDeepMerge(newDefaultOptions, opts, extendsDO)\n        return optionsDO(newDefaultOptions, scope)\n      }\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined\n    }\n    const type = typeMap[name]\n    if (!type && throwError === true) {\n      throw getError(\n        `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n      )\n    } else {\n      return type\n    }\n  }\n\n  function getTypes() {\n    return typeMap\n  }\n\n  function getTypeHeritage(parent) {\n    const heritage = []\n    let type = parent\n    if (angular.isString(type)) {\n      type = getType(parent)\n    }\n    parent = type.extends\n    while (parent) {\n      type = getType(parent)\n      heritage.push(type)\n      parent = type.extends\n    }\n    return heritage\n  }\n\n\n  function setWrapper(options, name) {\n    if (angular.isArray(options)) {\n      return options.map(wrapperOptions => setWrapper(wrapperOptions))\n    } else if (angular.isObject(options)) {\n      options.types = getOptionsTypes(options)\n      options.name = getOptionsName(options, name)\n      checkWrapperAPI(options)\n      templateWrappersMap[options.name] = options\n      return options\n    } else if (angular.isString(options)) {\n      return setWrapper({\n        template: options,\n        name,\n      })\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (angular.isString(options.types)) {\n      return [options.types]\n    }\n    if (!angular.isDefined(options.types)) {\n      return []\n    } else {\n      return options.types\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options)\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options)\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers')\n    } else {\n      delete options.overwriteOk\n    }\n    checkWrapperTypes(options)\n  }\n\n  function checkWrapperTypes(options) {\n    const shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString)\n    if (shouldThrow) {\n      throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`)\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn('overwriting-types-or-wrappers', [\n        `Attempting to overwrite ${property} on ${objectName} which is currently`,\n        `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n        `To supress this warning, specify the property \"overwriteOk: true\"`,\n      ].join(' '))\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName]\n  }\n\n  function getWrapperByType(type) {\n    /* eslint prefer-const:0 */\n    const wrappers = []\n    for (let name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(name)) {\n        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[name])\n        }\n      }\n    }\n    return wrappers\n  }\n\n  function removeWrapperByName(name) {\n    const wrapper = templateWrappersMap[name]\n    delete templateWrappersMap[name]\n    return wrapper\n  }\n\n  function removeWrappersForType(type) {\n    const wrappers = getWrapperByType(type)\n    if (!wrappers) {\n      return undefined\n    }\n    if (!angular.isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name)\n    } else {\n      wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name))\n      return wrappers\n    }\n  }\n\n\n  function warn() {\n    if (!_this.disableWarnings && console.warn) {\n      /* eslint no-console:0 */\n      const args = Array.prototype.slice.call(arguments)\n      const warnInfoSlug = args.shift()\n      args.unshift('Formly Warning:')\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`)\n      console.warn(...args)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyConfig.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyUsability;\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  var _this = this;\n\n  _angularFix2['default'].extend(this, {\n    getFormlyError: getFormlyError,\n    getFieldError: getFieldError,\n    checkWrapper: checkWrapper,\n    checkWrapperTemplate: checkWrapperTemplate,\n    getErrorMessage: getErrorMessage,\n    $get: function $get() {\n      return _this;\n    }\n  });\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message;\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message));\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    var url = '';\n    if (errorInfoSlug !== null) {\n      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n    }\n    return 'Formly Error: ' + message + '. ' + url;\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed'\n    });\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    var formlyTransclude = '<formly-transclude></formly-transclude>';\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./providers/formlyUsability.js","import angular from 'angular-fix'\n\nexport default formlyUsability\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  angular.extend(this, {\n    getFormlyError,\n    getFieldError,\n    checkWrapper,\n    checkWrapperTemplate,\n    getErrorMessage,\n    $get: () => this,\n  })\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message\n      message = errorInfoSlug\n      errorInfoSlug = null\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`)\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug\n      errorInfoSlug = null\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message))\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    let url = ''\n    if (errorInfoSlug !== null) {\n      url = `${formlyErrorAndWarningsUrlPrefix}${errorInfoSlug}`\n    }\n    return `Formly Error: ${message}. ${url}`\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed',\n    })\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    const formlyTransclude = '<formly-transclude></formly-transclude>'\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError(\n        `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n        `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n        `Additional information: ${JSON.stringify(additionalInfo)}`\n      )\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyUsability.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = formlyValidationMessages;\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  var validationMessages = {\n    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n    addStringMessage: addStringMessage,\n    messages: {}\n  };\n\n  return validationMessages;\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = function () {\n      return string;\n    };\n  }\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n      } else {\n        return alternate;\n      }\n    };\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./providers/formlyValidationMessages.js","export default formlyValidationMessages\n\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  const validationMessages = {\n    addTemplateOptionValueMessage,\n    addStringMessage,\n    messages: {},\n  }\n\n  return validationMessages\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate)\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = () => string\n  }\n\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n        return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`\n      } else {\n        return alternate\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyValidationMessages.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = addCustomTags;\n\n// @ngInject\nfunction addCustomTags($document) {\n  // IE8 check ->\n  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n  if ($document && $document.documentMode < 9) {\n    (function () {\n      var document = $document.get(0);\n      // add the custom elements that we need for formly\n      var customElements = ['formly-field', 'formly-form'];\n      _angularFix2['default'].forEach(customElements, function (el) {\n        document.createElement(el);\n      });\n    })();\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./run/formlyCustomTags.js","import angular from 'angular-fix'\nexport default addCustomTags\n\n// @ngInject\nfunction addCustomTags($document) {\n  // IE8 check ->\n  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n  if ($document && $document.documentMode < 9) {\n    const document = $document.get(0)\n    // add the custom elements that we need for formly\n    const customElements = [\n      'formly-field', 'formly-form',\n    ]\n    angular.forEach(customElements, el => {\n      document.createElement(el)\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./run/formlyCustomTags.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _otherUtils = require('../other/utils');\n\nexports['default'] = addFormlyNgModelAttrsManipulator;\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return;\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    var node = document.createElement('div');\n    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n    if (skip === true) {\n      return template;\n    }\n    node.innerHTML = template;\n\n    var modelNodes = getNgModelNodes(node, skip);\n    if (!modelNodes || !modelNodes.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id);\n    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\n    addValidation();\n    alterNgModelAttr();\n    addModelOptions();\n    addTemplateOptionsAttrs();\n    addNgModelElAttrs();\n\n    return node.innerHTML;\n\n    function addValidation() {\n      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n      }\n    }\n\n    function alterNgModelAttr() {\n      if (isPropertyAccessor(options.key)) {\n        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n      }\n    }\n\n    function addModelOptions() {\n      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      var to = options.templateOptions || {};\n      var ep = options.expressionProperties || {};\n\n      var ngModelAttributes = getBuiltInAttributes();\n\n      // extend with the user's specifications winning\n      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\n      // Feel free to make this more simple :-)\n      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n        /* eslint complexity:[2, 14] */\n        var attrVal = undefined,\n            attrName = undefined;\n        var ref = 'options.templateOptions[\\'' + name + '\\']';\n        var toVal = to[name];\n        var epVal = getEpValue(ep, name);\n\n        var inTo = _angularFix2['default'].isDefined(toVal);\n        var inEp = _angularFix2['default'].isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.statement && inTo) {\n          attrName = val.statement;\n          if (_angularFix2['default'].isString(to[name])) {\n            attrVal = '$eval(' + ref + ')';\n          } else if (_angularFix2['default'].isFunction(to[name])) {\n            attrVal = ref + '(model[options.key], options, this, $event)';\n          } else {\n            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean;\n          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean;\n            attrVal = true;\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n            attrName = val.bound;\n            attrVal = ref;\n          }\n\n        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal);\n        }\n      });\n    }\n\n    function addNgModelElAttrs() {\n      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n        addRegardlessOfPresence(modelNodes, name, val);\n      });\n    }\n  }\n\n  // Utility functions\n  function getNgModelNodes(node, skip) {\n    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n    try {\n      return node.querySelectorAll(query);\n    } catch (e) {\n      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n      //it should be removed when IE8 support is dropped\n      return getNgModelNodesFallback(node, skip);\n    }\n  }\n\n  function getNgModelNodesFallback(node, skip) {\n    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n    var matchingNgModelNodes = [];\n\n    //make sure this array is compatible with NodeList type by adding an 'item' function\n    matchingNgModelNodes.item = function (i) {\n      return this[i];\n    };\n\n    for (var i = 0; i < allNgModelNodes.length; i++) {\n      var ngModelNode = allNgModelNodes[i];\n      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n        matchingNgModelNodes.push(ngModelNode);\n      }\n    }\n\n    return matchingNgModelNodes;\n  }\n\n  function nodeMatches(node, selector) {\n    var div = document.createElement('div');\n    div.innerHTML = node.outerHTML;\n    return div.querySelector(selector);\n  }\n\n  function getBuiltInAttributes() {\n    var ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus'\n      }\n    };\n    var boundOnly = [];\n    var bothBooleanAndBound = ['required', 'disabled'];\n    var bothAttributeAndBound = ['pattern', 'minlength'];\n    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n    var attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type'];\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength');\n    } else {\n      boundOnly.push('maxlength');\n    }\n\n    _angularFix2['default'].forEach(boundOnly, function (item) {\n      ngModelAttributes[item] = { bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(statementOnly, function (item) {\n      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n      ngModelAttributes[propName] = { statement: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(attributeOnly, function (item) {\n      ngModelAttributes[item] = { attribute: item };\n    });\n    return ngModelAttributes;\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    _angularFix2['default'].forEach(nodes, function (node) {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val);\n      }\n    });\n  }\n\n  function addRegardlessOfPresence(nodes, attr, val) {\n    _angularFix2['default'].forEach(nodes, function (node) {\n      node.setAttribute(attr, val);\n    });\n  }\n\n  function isPropertyAccessor(key) {\n    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n  }\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./run/formlyNgModelAttrsManipulator.js","import angular from 'angular-fix'\nimport {contains} from '../other/utils'\n\nexport default addFormlyNgModelAttrsManipulator\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator)\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    const node = document.createElement('div')\n    const skip = options.extras && options.extras.skipNgModelAttrsManipulator\n    if (skip === true) {\n      return template\n    }\n    node.innerHTML = template\n\n    const modelNodes = getNgModelNodes(node, skip)\n    if (!modelNodes || !modelNodes.length) {\n      return template\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id)\n    addIfNotPresent(modelNodes, 'name', scope.name || scope.id)\n\n    addValidation()\n    alterNgModelAttr()\n    addModelOptions()\n    addTemplateOptionsAttrs()\n    addNgModelElAttrs()\n\n\n    return node.innerHTML\n\n\n    function addValidation() {\n      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '')\n      }\n    }\n\n    function alterNgModelAttr() {\n      if (isPropertyAccessor(options.key)) {\n        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key)\n      }\n    }\n\n    function addModelOptions() {\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions')\n        if (options.modelOptions.getterSetter) {\n          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value')\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return\n      }\n      const to = options.templateOptions || {}\n      const ep = options.expressionProperties || {}\n\n      const ngModelAttributes = getBuiltInAttributes()\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs)\n\n      // Feel free to make this more simple :-)\n      angular.forEach(ngModelAttributes, (val, name) => {\n        /* eslint complexity:[2, 14] */\n        let attrVal, attrName\n        const ref = `options.templateOptions['${name}']`\n        const toVal = to[name]\n        const epVal = getEpValue(ep, name)\n\n        const inTo = angular.isDefined(toVal)\n        const inEp = angular.isDefined(epVal)\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value\n          attrVal = name\n        } else if (val.statement && inTo) {\n          attrName = val.statement\n          if (angular.isString(to[name])) {\n            attrVal = `$eval(${ref})`\n          } else if (angular.isFunction(to[name])) {\n            attrVal = `${ref}(model[options.key], options, this, $event)`\n          } else {\n            throw new Error(\n              `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n            )\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound\n          attrVal = ref\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean\n          attrVal = `${$interpolate.startSymbol()}${ref}${$interpolate.endSymbol()}`\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute\n          attrVal = toVal\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean\n            attrVal = true\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n          attrName = val.bound\n          attrVal = ref\n        }\n\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal)\n        }\n      })\n    }\n\n    function addNgModelElAttrs() {\n      angular.forEach(options.ngModelElAttrs, (val, name) => {\n        addRegardlessOfPresence(modelNodes, name, val)\n      })\n    }\n  }\n\n  // Utility functions\n  function getNgModelNodes(node, skip) {\n    const selectorNot = angular.isString(skip) ? `:not(${skip})` : ''\n    const skipNot = ':not([formly-skip-ng-model-attrs-manipulator])'\n    const query = `[ng-model]${selectorNot}${skipNot}, [data-ng-model]${selectorNot}${skipNot}`\n    try {\n      return node.querySelectorAll(query)\n    } catch (e) {\n      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n      //it should be removed when IE8 support is dropped\n      return getNgModelNodesFallback(node, skip)\n    }\n  }\n\n  function getNgModelNodesFallback(node, skip) {\n    const allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]')\n    const matchingNgModelNodes = []\n\n    //make sure this array is compatible with NodeList type by adding an 'item' function\n    matchingNgModelNodes.item = function(i) {\n      return this[i]\n    }\n\n    for (let i = 0; i < allNgModelNodes.length; i++) {\n      const ngModelNode = allNgModelNodes[i]\n      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') &&\n        !(angular.isString(skip) && nodeMatches(ngModelNode, skip))) {\n        matchingNgModelNodes.push(ngModelNode)\n      }\n    }\n\n    return matchingNgModelNodes\n  }\n\n  function nodeMatches(node, selector) {\n    const div = document.createElement('div')\n    div.innerHTML = node.outerHTML\n    return div.querySelector(selector)\n  }\n\n  function getBuiltInAttributes() {\n    const ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus',\n      },\n    }\n    const boundOnly = []\n    const bothBooleanAndBound = ['required', 'disabled']\n    const bothAttributeAndBound = ['pattern', 'minlength']\n    const statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur']\n    const attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type']\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength')\n    } else {\n      boundOnly.push('maxlength')\n    }\n\n    angular.forEach(boundOnly, item => {\n      ngModelAttributes[item] = {bound: 'ng-' + item}\n    })\n\n    angular.forEach(bothBooleanAndBound, item => {\n      ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item}\n    })\n\n    angular.forEach(bothAttributeAndBound, item => {\n      ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item}\n    })\n\n    angular.forEach(statementOnly, item => {\n      const propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1)\n      ngModelAttributes[propName] = {statement: 'ng-' + item}\n    })\n\n    angular.forEach(attributeOnly, item => {\n      ngModelAttributes[item] = {attribute: item}\n    })\n    return ngModelAttributes\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] ||\n      ep[`templateOptions['${name}']`] ||\n      ep[`templateOptions[\"${name}\"]`]\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val)\n      }\n    })\n  }\n\n  function addRegardlessOfPresence(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      node.setAttribute(attr, val)\n    })\n  }\n\n  function isPropertyAccessor(key) {\n    return contains(key, '.') || (contains(key, '[') && contains(key, ']'))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./run/formlyNgModelAttrsManipulator.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _otherUtils = require('../other/utils');\n\nvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\nexports['default'] = formlyUtil;\n\n// @ngInject\nfunction formlyUtil() {\n  return _otherUtils2['default'];\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./services/formlyUtil.js","import utils from '../other/utils'\n\nexport default formlyUtil\n\n// @ngInject\nfunction formlyUtil() {\n  return utils\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./services/formlyUtil.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nexports['default'] = formlyWarn;\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n      $log.warn.apply($log, _toConsumableArray(args));\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n// WEBPACK FOOTER //\n// ./services/formlyWarn.js","export default formlyWarn\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      const args = Array.prototype.slice.call(arguments)\n      const warnInfoSlug = args.shift()\n      args.unshift('Formly Warning:')\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`)\n      $log.warn(...args)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/eslint-loader?configFile=./other/src.eslintrc!./services/formlyWarn.js","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}